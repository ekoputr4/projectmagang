%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 12.0.0
%%For: (fluxus) (x)
%%Title: (tiger.ai)
%%CreationDate: 4/14/2006 11:35 PM
%%BoundingBox: 22 167 567 730
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%%CMYKCustomColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])
%AI3_TemplateBox: 306.5 396.5 306.5 396.5
%AI3_TileBox: 0 1 612 793
%AI3_DocumentPreview: None
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%IncludeResource: procset Adobe_packedarray 2.0 0
Adobe_packedarray /initialize get exec
%%IncludeResource: procset Adobe_cmykcolor 1.1 0
%%IncludeResource: procset Adobe_cshow 1.1 0
%%IncludeResource: procset Adobe_customcolor 1.0 0
%%IncludeResource: procset Adobe_pattern_AI3 1.0 0
%%IncludeResource: procset Adobe_Illustrator_AI3 1.0 1
%%EndProlog
0 A
u
0 O
1 g
0 J 0 j 1 w 4 M []0 d
90.5 477.5 m
90.5767 475.4434 89.7798 475.5801 v
88.7646 475.4863 70.6641 528.3682 48.02 525.9795 c
67.6445 533.9883 90.5 477.5 v
F
0 R
0 G
0.1892 w 10 M
90.5 477.5 m
90.5767 475.4434 89.7798 475.5801 v
88.7646 475.4863 70.6641 528.3682 48.02 525.9795 c
67.6445 533.9883 90.5 477.5 v
90.5 477.5 l
s
0 O
1 g
1 w 4 M
94.3398 480.8594 m
93.7446 478.8555 92.8999 479.1797 v
92.0552 479.5107 93.0249 535.3975 71.0601 540.8594 c
92.0981 541.709 94.3398 480.8594 v
F
0 R
0 G
0.1892 w 10 M
94.3398 480.8594 m
93.7446 478.8555 92.8999 479.1797 v
92.0552 479.5107 93.0249 535.3975 71.0601 540.8594 c
92.0981 541.709 94.3398 480.8594 v
94.3398 480.8594 l
s
0 O
1 g
1 w 4 M
124.5801 434.2998 m
126.3872 433.2363 125.7798 432.3799 v
125.3525 431.7461 71.2617 445.8291 60.98 425.6602 c
64.9063 446.4102 124.5801 434.2998 v
F
0 R
0 G
0.1892 w 10 M
124.5801 434.2998 m
126.3872 433.2363 125.7798 432.3799 v
125.3525 431.7461 71.2617 445.8291 60.98 425.6602 c
64.9063 446.4102 124.5801 434.2998 v
124.5801 434.2998 l
s
0 O
1 g
1 w 4 M
121.46 423.0195 m
123.5381 422.624 123.3799 421.8193 v
123.0249 420.8838 67.2534 417.207 63.8599 394.7002 c
61.04 415.7598 121.46 423.0195 v
F
0 R
0 G
0.1892 w 10 M
121.46 423.0195 m
123.5381 422.624 123.3799 421.8193 v
123.0249 420.8838 67.2534 417.207 63.8599 394.7002 c
61.04 415.7598 121.46 423.0195 v
121.46 423.0195 l
s
0 O
1 g
1 w 4 M
116.8999 429.0195 m
118.8223 428.4082 118.3398 427.5801 v
118.0615 426.7617 62.3481 431.2617 55.7002 409.5801 c
55.9902 430.7334 116.8999 429.0195 v
F
0 R
0 G
0.1892 w 10 M
116.8999 429.0195 m
118.8223 428.4082 118.3398 427.5801 v
118.0615 426.7617 62.3481 431.2617 55.7002 409.5801 c
55.9902 430.7334 116.8999 429.0195 v
116.8999 429.0195 l
s
0 O
1 g
1 w 4 M
105.1401 449.1797 m
106.5298 447.6514 105.8599 447.0195 v
105.123 446.5039 57.0054 474.9434 41.54 458.2998 c
51.0586 477.2549 105.1401 449.1797 v
F
0 R
0 G
0.1892 w 10 M
105.1401 449.1797 m
106.5298 447.6514 105.8599 447.0195 v
105.123 446.5039 57.0054 474.9434 41.54 458.2998 c
51.0586 477.2549 105.1401 449.1797 v
105.1401 449.1797 l
s
0 O
1 g
1 w 4 M
96.7402 444.6201 m
98.3936 443.2139 97.7002 442.46 v
97.1265 441.9131 46.0977 464.7266 32.4199 446.54 c
39.9297 466.3496 96.7402 444.6201 v
F
0 R
0 G
0.1892 w 10 M
96.7402 444.6201 m
98.3936 443.2139 97.7002 442.46 v
97.1265 441.9131 46.0977 464.7266 32.4199 446.54 c
39.9297 466.3496 96.7402 444.6201 v
96.7402 444.6201 l
s
0 O
1 g
1 w 4 M
93.8599 440.0596 m
95.6982 438.9629 95.0601 438.1396 v
94.6206 437.5059 40.9614 453.1494 30.02 433.3398 c
34.6279 453.917 93.8599 440.0596 v
F
0 R
0 G
0.1892 w 10 M
93.8599 440.0596 m
95.6982 438.9629 95.0601 438.1396 v
94.6206 437.5059 40.9614 453.1494 30.02 433.3398 c
34.6279 453.917 93.8599 440.0596 v
93.8599 440.0596 l
s
0 O
1 g
1 w 4 M
105.6201 439.3398 m
106.9736 437.7129 106.1001 437.1797 v
105.4302 436.7549 61.3545 471.1279 43.7002 456.6201 c
55.7529 474.1826 105.6201 439.3398 v
F
0 R
0 G
0.1892 w 10 M
105.6201 439.3398 m
106.9736 437.7129 106.1001 437.1797 v
105.4302 436.7549 61.3545 471.1279 43.7002 456.6201 c
55.7529 474.1826 105.6201 439.3398 v
105.6201 439.3398 l
s
0 O
1 g
1 w 4 M
84.02 471.2598 m
84.6416 469.2607 83.7798 469.0996 v
82.8799 468.8213 51.4209 515.0215 30.2598 506.7803 c
47.0215 519.6416 84.02 471.2598 v
F
0 R
0 G
0.1892 w 10 M
84.02 471.2598 m
84.6416 469.2607 83.7798 469.0996 v
82.8799 468.8213 51.4209 515.0215 30.2598 506.7803 c
47.0215 519.6416 84.02 471.2598 v
84.02 471.2598 l
s
0 O
1 g
1 w 4 M
84.7402 463.5801 m
85.8174 461.7725 84.98 461.4199 v
84.1929 460.9639 43.5078 499.292 24.7402 486.6201 c
38.2158 502.8535 84.7402 463.5801 v
F
0 R
0 G
0.1892 w 10 M
84.7402 463.5801 m
85.8174 461.7725 84.98 461.4199 v
84.1929 460.9639 43.5078 499.292 24.7402 486.6201 c
38.2158 502.8535 84.7402 463.5801 v
84.7402 463.5801 l
s
0 O
1 g
1 w 4 M
84.5 458.7803 m
85.8535 457.0732 84.98 456.6201 v
84.3105 456.1182 40.2344 490.4883 22.5801 476.0596 c
34.6328 493.541 84.5 458.7803 v
F
0 R
0 G
0.1892 w 10 M
84.5 458.7803 m
85.8535 457.0732 84.98 456.6201 v
84.3105 456.1182 40.2344 490.4883 22.5801 476.0596 c
34.6328 493.541 84.5 458.7803 v
84.5 458.7803 l
s
0 O
1 g
1 w 4 M
82.1001 456.8594 m
82.7407 450.2168 83.8281 442.9902 85.7002 439.5801 c
81.7808 425.9189 91.46 411.5 v
91.0205 403.4795 92.8999 399.9795 v
97.1816 390.7207 102.5 389.8994 v
106.7334 389.1299 116.3286 385.7529 127.2197 384.1396 c
146.0215 368.7197 142.5801 354.6201 v
142.0615 336.6006 138.02 334.9395 v
150.8599 347.1582 140.4199 328.7002 v
135.3799 308.0596 l
163.6206 331.7598 146.4199 311.4199 v
135.3799 282.8594 l
157.0205 303.1592 149.0601 293.8994 v
145.7002 284.2998 l
193.1001 314.1582 159.1401 281.6602 v
168.02 285.5596 172.8198 282.3799 v
180.3418 283.8008 179.54 282.1396 v
156.5815 270.6006 152.6602 250.46 v
161.8613 261.3584 158.4199 249.5 v
158.8999 236.7803 l
163.1816 260.4795 162.7402 219.0195 v
183.8599 238.9209 171.1401 216.1396 v
171.1401 197.6602 l
187.8198 215.5996 180.7402 201.5 v
191.7798 211.2002 187.46 194.54 v
186.5 183.0391 191.2998 195.2598 v
208.9399 229.0205 202.3398 200.2998 v
201.4614 179.0791 206.6602 195.2598 v
207.1807 183.9199 217.2197 176.0596 v
215.9814 231.8789 230.1802 192.3799 v
234.5 174.1396 l
237.541 184.3594 237.1401 189.9795 v
253.3809 208.1191 246.02 181.3398 v
262.6206 206.3594 259.2197 191.8994 v
250.7407 174.2402 252.5 168.8594 v
270.98 207.2402 272.4199 208.9395 v
270.1016 162.3584 282.02 201.9795 v
288.1401 188.7607 285.1401 183.9795 v
293.8613 192.7207 293.0601 196.2197 v
298.04 205.2607 301.2197 190.2197 v
303.1016 179.96 304.8198 183.5 v
309.2598 157.0781 310.5801 182.0596 v
312.3418 197.1201 304.3398 209.8994 v
305.2998 213.3994 302.1802 217.8193 v
317.1797 194.04 309.3799 225.7393 v
321.582 216.9199 322.8203 216.8594 v
307.9395 242.4385 317.54 237.2598 v
311.9004 248.5996 331.7002 235.3398 v
314.1006 252.999 333.3799 242.54 v
342.2617 235.3994 333.8594 246.3799 v
318.0605 264.001 342.2598 244.2197 v
355.0205 226.1602 355.9395 223.0996 v
344.9023 255.2002 340.0996 258.3799 v
349.3018 298.3203 394.5801 281.1797 v
402.1016 262.2393 407.0605 282.3799 v
421.0215 289.5195 433.46 259.0996 v
437.7422 274.1191 436.8203 277.0996 v
444.3418 275.8779 443.54 277.0996 v
457.9805 272.3594 459.3799 273.2598 v
466.7813 265.7598 467.2998 269.6602 v
477.3418 266.6406 475.2197 270.6201 v
484.8223 253.4404 485.2998 249.5 v
487.9395 264.8594 l
490.0996 261.7393 l
491.8613 270.1592 491.0605 271.5801 v
490.1025 272.7988 512.9814 264.001 518.1797 241.0996 c
520.5801 231.9795 l
527.0625 248.1602 525.3799 252.6201 v
531.0225 251.6787 531.3799 246.8594 v
535.8613 272.3594 530.6602 279.0195 v
535.4219 279.8408 536.6602 275.8994 v
536.6602 283.8193 l
544.6621 282.9199 544.5801 285.5 v
549.502 289.959 551.7793 284.7803 v
538.0615 323.4004 558.2598 302.2998 v
566.2207 290.4004 562.3398 311.1797 v
558.3008 331.7598 553.9014 333.5186 559.2207 333.9795 c
560.0625 337.9209 557.7793 339.7393 v
555.6602 341.4385 559.2207 339.7393 y
564.4609 335.2803 558.7402 359.4199 v
565.7813 357.7207 552.5 389.8994 v
555.6602 392.4795 551.2998 401.6602 v
560.0625 396.8789 563.0605 398.54 v
562.7021 400.3994 559.2207 404.7803 v
535.4219 465.0801 557.7793 440.7803 v
570.8965 425.9746 563.7793 451.0996 v
553.834 477.4658 554.6602 482.2998 v
82.1001 456.8594 l
F
0 R
0 G
1.1 w 10 M
82.1001 456.8594 m
82.7407 450.2168 83.8281 442.9902 85.7002 439.5801 c
81.7808 425.9189 91.46 411.5 v
91.0205 403.4795 92.8999 399.9795 v
97.1816 390.7207 102.5 389.8994 v
106.7334 389.1299 116.3286 385.7529 127.2197 384.1396 c
146.0215 368.7197 142.5801 354.6201 v
142.0615 336.6006 138.02 334.9395 v
150.8599 347.1582 140.4199 328.7002 v
135.3799 308.0596 l
163.6206 331.7598 146.4199 311.4199 v
135.3799 282.8594 l
157.0205 303.1592 149.0601 293.8994 v
145.7002 284.2998 l
193.1001 314.1582 159.1401 281.6602 v
168.02 285.5596 172.8198 282.3799 v
180.3418 283.8008 179.54 282.1396 v
156.5815 270.6006 152.6602 250.46 v
161.8613 261.3584 158.4199 249.5 v
158.8999 236.7803 l
163.1816 260.4795 162.7402 219.0195 v
183.8599 238.9209 171.1401 216.1396 v
171.1401 197.6602 l
187.8198 215.5996 180.7402 201.5 v
191.7798 211.2002 187.46 194.54 v
186.5 183.0391 191.2998 195.2598 v
208.9399 229.0205 202.3398 200.2998 v
201.4614 179.0791 206.6602 195.2598 v
207.1807 183.9199 217.2197 176.0596 v
215.9814 231.8789 230.1802 192.3799 v
234.5 174.1396 l
237.541 184.3594 237.1401 189.9795 v
253.3809 208.1191 246.02 181.3398 v
262.6206 206.3594 259.2197 191.8994 v
250.7407 174.2402 252.5 168.8594 v
270.98 207.2402 272.4199 208.9395 v
270.1016 162.3584 282.02 201.9795 v
288.1401 188.7607 285.1401 183.9795 v
293.8613 192.7207 293.0601 196.2197 v
298.04 205.2607 301.2197 190.2197 v
303.1016 179.96 304.8198 183.5 v
309.2598 157.0781 310.5801 182.0596 v
312.3418 197.1201 304.3398 209.8994 v
305.2998 213.3994 302.1802 217.8193 v
317.1797 194.04 309.3799 225.7393 v
321.582 216.9199 322.8203 216.8594 v
307.9395 242.4385 317.54 237.2598 v
311.9004 248.5996 331.7002 235.3398 v
314.1006 252.999 333.3799 242.54 v
342.2617 235.3994 333.8594 246.3799 v
318.0605 264.001 342.2598 244.2197 v
355.0205 226.1602 355.9395 223.0996 v
344.9023 255.2002 340.0996 258.3799 v
349.3018 298.3203 394.5801 281.1797 v
402.1016 262.2393 407.0605 282.3799 v
421.0215 289.5195 433.46 259.0996 v
437.7422 274.1191 436.8203 277.0996 v
444.3418 275.8779 443.54 277.0996 v
457.9805 272.3594 459.3799 273.2598 v
466.7813 265.7598 467.2998 269.6602 v
477.3418 266.6406 475.2197 270.6201 v
484.8223 253.4404 485.2998 249.5 v
487.9395 264.8594 l
490.0996 261.7393 l
491.8613 270.1592 491.0605 271.5801 v
490.1025 272.7988 512.9814 264.001 518.1797 241.0996 c
520.5801 231.9795 l
527.0625 248.1602 525.3799 252.6201 v
531.0225 251.6787 531.3799 246.8594 v
535.8613 272.3594 530.6602 279.0195 v
535.4219 279.8408 536.6602 275.8994 v
536.6602 283.8193 l
544.6621 282.9199 544.5801 285.5 v
549.502 289.959 551.7793 284.7803 v
538.0615 323.4004 558.2598 302.2998 v
566.2207 290.4004 562.3398 311.1797 v
558.3008 331.7598 553.9014 333.5186 559.2207 333.9795 c
560.0625 337.9209 557.7793 339.7393 v
555.6602 341.4385 559.2207 339.7393 y
564.4609 335.2803 558.7402 359.4199 v
565.7813 357.7207 552.5 389.8994 v
555.6602 392.4795 551.2998 401.6602 v
560.0625 396.8789 563.0605 398.54 v
562.7021 400.3994 559.2207 404.7803 v
535.4219 465.0801 557.7793 440.7803 v
570.8965 425.9746 563.7793 451.0996 v
553.834 477.4658 554.6602 482.2998 v
82.1001 456.8594 l
82.1001 456.8594 l
s
0 O
0.164706 0.627451 1 0.031373 k
1 w 4 M
554.6602 482.0596 m
555.3799 481.7715 557.8066 480.5361 559.2197 478.7002 c
566.6621 466.8418 560.9004 487.0996 v
550.8223 518.7607 560.4199 506.54 v
567.1016 498.5215 563.54 513.5 v
559.3301 531.5498 556.5801 538.46 y
569.3027 533.2803 539.7793 576.8594 v
549.6201 572.7793 l
527.9414 616.4404 504.2598 622.2197 v
495.3799 628.7002 l
537.623 670.5605 523.46 711.0195 v
516.0605 716.7607 505.46 706.7002 v
498.4609 701.3594 491.7793 703.0996 v
457.9805 701.8018 455.7793 701.8994 v
453.582 701.8018 415.3018 742.7217 343.2197 723.2598 c
337.4219 721.1602 332.6602 722.54 v
312.3418 740.0811 258.7397 715.0996 v
247.6616 712.8008 246.02 712.7002 v
244.1406 712.8008 241.0615 712.8008 232.3398 705.7393 c
223.46 698.7197 223.0205 697.8418 220.8198 696.1396 c
202.7817 683.7607 197.54 682.9395 v
184.7407 675.8408 180.02 664.9395 v
175.9399 663.5 l
174.1807 655.6016 173.7798 654.3799 v
168.4614 650.3213 167.54 644.0596 v
157.9014 637.5605 158.4199 632.7793 v
156.5815 627.001 155.7798 621.7393 v
147.7808 616.4404 148.5801 613.3398 v
140.2998 597.9609 141.6201 590.54 v
134.5806 590.9209 131.54 588.3799 v
130.6206 583.001 128.8999 582.6201 v
125.7798 581.2393 128.4199 576.8594 v
126.6606 573.7617 126.2598 572.0596 v
127.1001 568.9209 122.1797 562.7002 v
115.2197 542.0811 117.3799 536.2998 v
117.8599 531.0801 114.7397 529.3398 v
110.8208 529.7598 120.02 516.6201 v
120.9414 515.2393 117.3799 512.54 v
98.5015 508.6396 95.7798 490.7002 v
80.8999 474.3193 80.8999 468.6201 v
80.8999 466.0664 81.1973 462.6025 81.8599 457.5801 c
81.3418 448.3594 111.6201 447.5 v
142.0615 446.5996 554.6602 482.0596 y
F
0 R
0 G
1.1 w 10 M
554.6602 482.0596 m
555.3799 481.7715 557.8066 480.5361 559.2197 478.7002 c
566.6621 466.8418 560.9004 487.0996 v
550.8223 518.7607 560.4199 506.54 v
567.1016 498.5215 563.54 513.5 v
559.3301 531.5498 556.5801 538.46 y
569.3027 533.2803 539.7793 576.8594 v
549.6201 572.7793 l
527.9414 616.4404 504.2598 622.2197 v
495.3799 628.7002 l
537.623 670.5605 523.46 711.0195 v
516.0605 716.7607 505.46 706.7002 v
498.4609 701.3594 491.7793 703.0996 v
457.9805 701.8018 455.7793 701.8994 v
453.582 701.8018 415.3018 742.7217 343.2197 723.2598 c
337.4219 721.1602 332.6602 722.54 v
312.3418 740.0811 258.7397 715.0996 v
247.6616 712.8008 246.02 712.7002 v
244.1406 712.8008 241.0615 712.8008 232.3398 705.7393 c
223.46 698.7197 223.0205 697.8418 220.8198 696.1396 c
202.7817 683.7607 197.54 682.9395 v
184.7407 675.8408 180.02 664.9395 v
175.9399 663.5 l
174.1807 655.6016 173.7798 654.3799 v
168.4614 650.3213 167.54 644.0596 v
157.9014 637.5605 158.4199 632.7793 v
156.5815 627.001 155.7798 621.7393 v
147.7808 616.4404 148.5801 613.3398 v
140.2998 597.9609 141.6201 590.54 v
134.5806 590.9209 131.54 588.3799 v
130.6206 583.001 128.8999 582.6201 v
125.7798 581.2393 128.4199 576.8594 v
126.6606 573.7617 126.2598 572.0596 v
127.1001 568.9209 122.1797 562.7002 v
115.2197 542.0811 117.3799 536.2998 v
117.8599 531.0801 114.7397 529.3398 v
110.8208 529.7598 120.02 516.6201 v
120.9414 515.2393 117.3799 512.54 v
98.5015 508.6396 95.7798 490.7002 v
80.8999 474.3193 80.8999 468.6201 v
80.8999 466.0664 81.1973 462.6025 81.8599 457.5801 c
81.3418 448.3594 111.6201 447.5 v
142.0615 446.5996 554.6602 482.0596 y
554.6602 482.0596 l
s
0 O
0.164706 0.627451 1 0.031373 k
1 w 4 M
97.9399 457.3398 m
70.3398 500.7197 86.1802 438.6201 y
95.8613 400.8389 238.3398 442.2197 y
424.1025 475.6396 436.3398 480.1396 v
448.7402 484.4404 553.46 477.5 y
547.2207 495.9795 l
476.0215 546.9199 454.9014 521.4004 439.9395 525.7402 c
424.9805 530.2012 427.6211 519.6416 424.0996 518.7803 c
420.582 517.8799 377.4609 545.1602 370.3398 544.2197 c
363.3828 543.4014 335.5059 569.5273 351.8594 534.6201 c
369.541 497.2012 287.7007 491.4795 269.2998 503.8994 c
250.7407 516.1201 277.2197 483.5 y
297.3799 461.5615 259.46 480.1396 y
221.7007 494.1201 195.3008 465.9609 191.7798 465.0195 c
188.2617 464.2012 182.9814 460.6807 182.1802 467.6602 c
181.2197 474.7617 172.959 493.1309 138.02 464.2998 c
116.1006 445.9395 100.8198 470.0596 y
97.9399 457.3398 l
F
0.054902 0.607843 0.878431 0 k
371.7793 542.2998 m
364.8203 541.4814 336.918 567.5938 353.2998 532.7002 c
371.6406 493.9609 289.1406 489.5596 270.7402 501.9795 c
252.1807 514.2002 278.6602 481.5801 y
298.8198 459.6416 260.8999 478.2197 y
223.1406 492.2002 196.7407 464.04 193.2197 463.0996 c
189.7017 462.2813 184.4214 458.7607 183.6201 465.7393 c
182.6602 472.8418 174.543 491.0283 139.46 462.3799 c
116.1802 443.1992 101.2998 466.7002 y
97.9399 455.6602 l
70.3208 499.46 86.8999 435.2598 y
96.5815 397.4785 239.7798 440.2998 y
425.54 473.7197 437.7793 478.2197 v
450.1807 482.5205 553.9395 475.5801 y
547.9395 494.54 l
476.5801 545.6406 456.3418 519.4805 441.3799 523.8193 c
426.4209 528.2813 429.0605 517.7217 425.54 516.8594 c
422.0215 515.96 378.9004 543.2402 371.7793 542.2998 c
F
0.047059 0.537255 0.772549 0 k
373.2197 540.3799 m
366.2598 539.5615 339.0537 565.9922 354.7402 530.7793 c
372.6416 490.9395 290.5806 487.6396 272.1802 500.0596 c
253.6206 512.2783 280.1001 479.6602 y
300.2598 457.7188 262.3398 476.2998 y
224.5806 490.2793 198.1807 462.1182 194.6602 461.1797 c
191.1392 460.3594 185.8594 456.8379 185.0601 463.8193 c
184.1001 470.9189 176.127 488.9238 140.8999 460.46 c
116.2593 440.458 101.7798 463.3398 y
97.7002 453.9795 l
71.6216 496.8799 87.6201 431.8994 y
97.3018 394.1191 241.2197 438.3799 y
426.9805 471.7998 439.2197 476.2998 v
451.6211 480.5977 554.4199 473.6602 y
548.4199 493.3398 l
477.1406 544.3594 457.7813 517.5605 442.8203 521.8994 c
427.8613 526.3613 430.501 515.8018 426.9805 514.9395 c
423.4609 514.04 380.3408 541.3203 373.2197 540.3799 c
F
0.039216 0.462745 0.67451 0 k
374.6602 538.46 m
367.7002 537.6416 340.498 564.0752 356.1797 528.8594 c
374.7422 487.5293 291.4326 486.1113 273.6201 498.1396 c
255.0605 510.3604 281.54 477.7393 y
301.7002 455.8018 263.7798 474.3799 y
226.0205 488.3594 199.6206 460.2002 196.1001 459.2598 c
192.5815 458.4414 187.3018 454.9209 186.5 461.8994 c
185.54 469.001 177.7134 486.8164 142.3398 458.54 c
116.3408 437.7197 102.2598 460.2197 y
97.7002 452.2998 l
73.7983 492.7617 88.3398 428.54 y
98.0215 390.7588 242.6602 436.46 y
428.4199 469.8799 440.6602 474.3799 v
453.0625 478.6807 554.9004 471.9795 y
548.9004 492.1396 l
477.7012 543.0801 459.2217 515.6406 444.2598 519.9795 c
429.3008 524.4414 431.9414 513.8818 428.4199 513.0195 c
424.9014 512.1201 381.7813 539.4004 374.6602 538.46 c
F
0.035294 0.396078 0.572549 0 k
376.0996 536.54 m
369.1406 535.7188 342.4951 562.3994 357.6201 526.9395 c
376.1816 483.7998 293.4609 483.7998 275.0601 496.2197 c
256.501 508.4385 282.98 475.8193 y
303.1401 453.8789 265.2197 472.46 y
227.4609 486.4395 201.0605 458.2783 197.54 457.3398 c
194.0215 456.5186 188.7417 452.998 187.9399 459.9795 c
186.98 467.0791 179.2974 484.7139 143.7798 456.6201 c
116.4199 434.9785 102.5 456.8594 y
97.7002 450.6201 l
75.98 488.8613 89.0601 425.1797 y
98.7393 387.3994 244.1001 434.54 y
429.8623 467.96 442.0996 472.46 v
454.5039 476.7578 555.3799 470.0596 y
549.6201 490.7002 l
478.2637 541.8008 460.6621 513.7178 445.7002 518.0596 c
430.7432 522.5186 433.3828 511.959 429.8594 511.0996 c
426.3418 510.2002 383.2227 537.4785 376.0996 536.54 c
F
0.031373 0.333333 0.470588 0 k
377.54 534.6201 m
370.582 533.8018 342.0225 559.5967 359.0605 525.0195 c
380.2617 482.3213 294.9009 481.8799 276.5 494.2998 c
257.9409 506.5205 284.4199 473.8994 y
304.5801 451.959 266.6602 470.54 y
228.9009 484.5195 202.501 456.3604 198.98 455.4199 c
195.4614 454.6016 190.1816 451.0801 189.3799 458.0596 c
188.4199 465.1592 180.8818 482.6094 145.2197 454.7002 c
116.5015 432.2383 102.98 453.5 y
97.7002 448.9395 l
77.9409 485.4004 89.7798 421.8193 y
99.4614 384.0391 245.54 432.6201 y
431.3027 466.04 443.54 470.54 v
455.9434 474.8408 555.8594 468.1396 y
550.0996 489.5 l
478.8223 540.5186 462.1016 511.8008 447.1406 516.1396 c
432.1836 520.6016 434.8232 510.0391 431.2998 509.1797 c
427.7813 508.2793 384.6631 535.5605 377.54 534.6201 c
F
0.027451 0.278431 0.372549 0 k
378.9805 532.7002 m
372.0195 531.8818 343.0449 557.4678 360.5 523.0996 c
383.0215 479.0791 296.3408 479.96 277.9399 492.3799 c
259.3809 504.5977 285.8599 471.9795 y
306.02 450.0391 268.1001 468.6201 y
230.3408 482.5996 203.9409 454.4385 200.4199 453.5 c
196.9014 452.6787 191.6216 449.1582 190.8198 456.1396 c
189.8599 463.2393 182.4658 480.5049 146.6602 452.7793 c
116.5806 429.5 103.46 450.1396 y
97.7002 447.2598 l
80.1201 480.3994 90.5 418.46 y
100.1792 380.6787 246.98 430.7002 y
432.7422 464.1201 444.9805 468.6201 v
457.3828 472.918 556.3398 466.46 y
550.5801 488.2998 l
479.3818 539.2393 463.541 509.8779 448.5801 514.2197 c
433.623 518.6816 436.2637 508.1191 432.7402 507.2598 c
429.2217 506.3594 386.1035 533.6406 378.9805 532.7002 c
F
0.019608 0.215686 0.286275 0 k
380.4199 530.7793 m
373.4629 529.959 343.2754 554.9023 361.9395 521.1797 c
386.2227 477.6006 297.7808 478.04 279.3799 490.46 c
260.8208 502.6807 287.2998 470.0596 y
307.46 448.1191 269.54 466.7002 y
231.7808 480.6797 205.3809 452.5205 201.8599 451.5801 c
198.3418 450.7588 193.0615 447.2402 192.2598 454.2197 c
191.2998 461.3193 184.0498 478.3994 148.1001 450.8594 c
116.6602 426.7588 103.9399 446.7793 y
97.7002 445.5801 l
81.8599 476.7197 91.2197 415.0996 y
100.9014 377.3193 248.4199 428.7793 y
434.1826 462.2002 446.4199 466.7002 v
458.8232 471.001 556.8203 464.54 y
551.2998 486.8594 l
479.9434 537.9609 464.9814 507.9609 450.0195 512.2998 c
435.0625 516.7588 437.7031 506.1992 434.1797 505.3398 c
430.6621 504.4395 387.543 531.7207 380.4199 530.7793 c
F
0.015686 0.156863 0.203922 0 k
381.8594 528.8594 m
374.9023 528.0391 344.7148 552.9824 363.3799 519.2598 c
387.6631 475.6777 299.2231 476.1201 280.8198 488.54 c
262.2607 500.7578 288.7402 468.1396 y
308.9023 446.1992 270.98 464.7793 y
233.2207 478.7598 206.8208 450.5977 203.2998 449.6602 c
199.7817 448.8389 194.5015 445.3184 193.7002 452.2998 c
192.7402 459.3994 185.6357 476.2949 149.54 448.9395 c
116.7417 424.0186 104.1802 443.4199 y
97.7002 443.6602 l
82.7192 472.8193 91.9399 411.7393 y
101.6216 373.959 249.8599 426.8594 y
435.623 460.2793 447.8594 464.7793 v
460.2637 469.0781 557.2998 462.6201 y
551.7793 485.6602 l
480.502 536.6787 466.4219 506.0381 451.46 510.3799 c
436.501 514.8389 439.1426 504.2793 435.6201 503.4199 c
432.1016 502.5195 388.9834 529.7979 381.8594 528.8594 c
F
0.011765 0.098039 0.12549 0 k
383.2998 526.9395 m
376.3418 526.1191 346.582 551.2949 364.8203 517.3398 c
389.1006 472.4404 300.6606 474.2002 282.2598 486.6201 c
263.7007 498.8408 290.1802 466.2197 y
310.3418 444.2793 272.4199 462.8594 y
234.6606 476.8398 208.2607 448.6807 204.7402 447.7393 c
201.2217 446.9189 195.9414 443.4004 195.1401 450.3799 c
194.1802 457.4785 187.2197 474.1904 150.98 447.0195 c
116.8208 421.2793 104.6602 440.0596 y
97.7002 441.9795 l
83.3599 468.4805 92.6602 408.3799 y
102.3418 370.5986 251.2998 424.9395 y
437.0625 458.3594 449.2998 462.8594 v
461.7012 467.1602 557.7793 460.9395 y
552.2598 484.46 l
481.0615 535.3994 467.8613 504.1201 452.9004 508.46 c
437.9414 512.9189 440.5801 502.3594 437.0605 501.5 c
433.541 500.5996 390.4209 527.8809 383.2998 526.9395 c
F
0 0.039216 0.05098 0 k
384.7402 525.0195 m
377.7822 524.2012 349.208 549.9893 366.2598 515.4199 c
389.6621 468.3193 302.1006 472.2793 283.7002 484.7002 c
265.1406 496.918 291.6201 464.2998 y
311.7822 442.3594 273.8599 460.9395 y
236.1006 474.9199 209.7007 446.7578 206.1802 445.8193 c
202.6616 444.999 197.3818 441.4785 196.5801 448.46 c
195.6226 455.5586 188.8042 472.085 152.4199 445.0996 c
116.8999 418.5391 105.1401 436.7002 y
97.7002 440.2998 l
83.5591 465.8984 93.3799 405.0195 y
103.0615 367.2393 252.7402 423.0195 y
438.502 456.4395 450.7402 460.9395 v
463.1426 465.2383 558.2598 459.0195 y
552.9805 483.0195 l
481.6211 534.1201 469.3018 502.1982 454.3398 506.54 c
439.3828 511.001 442.0234 500.4385 438.5 499.5801 c
434.9814 498.6797 391.8613 525.9609 384.7402 525.0195 c
F
1 g
97.7002 438.6201 m
83.54 462.8818 94.1001 401.6602 y
103.7817 363.8789 254.1802 421.0996 y
439.9424 454.5195 452.1797 459.0195 v
464.5801 463.3203 558.7402 457.0996 y
553.46 481.8193 l
482.1826 532.8418 470.7422 500.2803 455.7793 504.6201 c
440.8203 509.0811 443.4609 498.5215 439.9395 497.6602 c
436.4219 496.7598 393.3008 524.041 386.1797 523.0996 c
379.2227 522.2813 351.4785 548.4678 367.7002 513.5 c
392.2305 461.002 300.9463 472.0898 285.1401 482.7803 c
266.5806 495.001 293.0601 462.3799 y
313.2197 440.4395 275.2998 459.0195 y
237.541 473 211.1406 444.8408 207.6201 443.8994 c
204.1016 443.0791 198.8218 439.5586 198.02 446.54 c
197.0601 453.6416 190.3877 469.9834 153.8599 443.1797 c
116.9814 415.8008 105.6201 433.3398 y
97.7002 438.6201 l
F
0 g
143.2998 405.7402 m
135.4614 392.9189 158.4199 378.3799 v
159.8818 376.8584 140.1802 381.5 v
133.2607 383.6787 131.54 395.1797 v
126.2217 399.958 120.98 406.2197 v
115.6616 412.2803 143.2998 405.7402 y
F
0.8 g
297.3799 458.0596 m
316.8486 428.5371 316.0996 423.2598 v
314.7607 411.8408 314.54 401.2803 318.0195 396.8594 c
321.582 392.4795 331.2197 356.0596 y
330.8223 354.6387 344.4199 396.3799 v
357.2217 414.0391 335.2998 434.2998 v
296.5015 465.9609 297.3799 458.0596 v
F
0 g
165.3799 376.2197 m
177.7017 368.2803 161.7798 333.9795 v
168.98 336.6201 l
168.02 324.2793 164.4199 321.7393 v
172.3398 325.0996 l
177.7017 316.3594 173.2998 311.1797 v
191.7798 302.2803 190.8198 295.3398 v
197.9409 304.04 193.46 311.1797 v
189.1401 318.1201 181.2197 313.7188 182.1802 333.9795 c
172.3398 330.3799 l
178.5801 340.1191 178.5801 347.1797 v
169.7002 344.54 l
186.7949 373.7549 174.98 375.2598 v
168.4614 376.2002 165.3799 376.2197 y
F
0.8 g
201.1401 357.7393 m
204.1016 362.5586 201.1401 361.5801 v
197.9409 360.7998 163.6206 344.5205 156.98 333.9795 c
194.8613 360.7998 201.1401 357.7393 v
F
212.4199 348.8594 m
215.54 353.7578 212.4199 352.9395 v
209.3818 351.999 175.0615 335.7197 168.5 325.0996 c
206.2998 351.999 212.4199 348.8594 v
F
227.0601 365.6602 m
230.0601 370.4795 227.0601 369.5 v
223.9014 368.7197 189.5815 352.4404 182.8999 341.8994 c
220.8198 368.7197 227.0601 365.6602 v
F
201.3799 317.6602 m
201.4614 324.2793 198.5 323.4199 v
195.3008 322.5195 155.7007 303.1592 149.0601 292.7002 c
195.3008 320.7578 201.3799 317.6602 v
F
202.8198 329.6602 m
204.1016 334.8389 201.1401 333.9795 v
198.8218 333.958 169.7817 321.2002 163.2197 310.7002 c
195.7402 334.3994 202.8198 329.6602 v
F
186.98 277.0996 m
175.9399 268.9395 l
187.3809 277.2002 191.2998 275.8994 v
183.8599 263.5586 182.8999 257.8994 v
194.4199 271.9209 200.6602 271.5801 v
208.9399 271.04 209.0601 259.0996 v
215.1006 270.6006 218.6602 270.1396 v
219.9414 263.1201 218.6602 255.7393 v
223.0205 264.001 227.54 262.2197 v
234.4614 264.4395 233.54 251.6602 v
233.5806 240.2402 232.8198 237.2598 v
238.8608 266.1992 241.46 266.54 v
250.3018 267.958 255.6201 258.3799 v
251.1802 266.6406 256.5801 264.3799 v
268.3398 262.6777 271.9399 255.2598 v
264.3799 268.3994 270.5 264.8594 v
278.0215 264.8789 279.3799 257.8994 v
288.5815 234.5186 290.8999 232.7002 v
282.4209 256.5195 284.1802 256.46 v
281.9814 269.7197 287.7798 253.3398 v
284.1802 268.8389 290.4199 267.9795 v
296.5015 267.0801 301.3398 256.0781 310.5801 258.6201 c
321.1426 252.5596 323.2998 328.7002 v
186.98 277.0996 l
F
0 g
192.2598 379.3398 m
208.501 385.8799 252.5 379.3398 v
260.4199 378.8408 267.8599 388.46 v
275.3818 398.1992 304.8608 406.1191 312.0195 403.8193 c
322.5801 396.8594 l
323.2998 395.6602 l
336.9824 384.1201 337.46 375.7393 v
337.8613 367.3994 321.582 314.5996 311.0605 297.0195 c
300.4614 279.3994 289.9014 265.7598 268.8198 268.46 c
245.8999 272.7988 217.7002 268.46 v
185.6216 270.1592 182.6602 279.0195 v
179.4609 287.7578 194.8999 304.46 y
199.7002 313.7188 198.5 329.6602 v
197.0601 345.3994 197.5015 376.2002 192.2598 379.3398 c
F
0.047059 0.745098 0.211765 0 k
216.5 377.1797 m
225.6606 356.8398 193.2197 285.0195 y
190.9014 283.3594 207.0273 276.7109 218.1802 279.5 c
230.2207 282.3008 274.5801 277.5801 y
300.4614 294.7998 314.6602 343.5801 y
325.9805 370.04 306.7402 373.5801 v
287.2617 377.0791 216.5 377.1797 y
F
0.247059 0.933333 0.509804 0.070588 k
214.1001 343.0996 m
217.8438 357.1641 219.5864 370.1426 216.5 377.1797 c
285.0605 370.04 297.3799 393.0195 v
302.0454 401.583 318.2813 367.8389 317.7793 357.2598 c
248.54 341.4385 232.3398 353.6602 v
214.1001 343.0996 l
F
0.266667 0.972549 0.580392 0.137255 k
219.1401 325.0996 m
221.2617 317.2393 218.6602 312.8594 v
216.8599 311.96 215.54 311.4199 v
216.8599 307.5586 223.46 305.8994 v
225.6606 300.958 228.2598 300.6201 v
230.9409 300.0801 236.2207 293.9189 240.7402 295.3398 c
245.0215 296.5586 257.2998 300.8594 y
263.5015 304.4795 273.1401 300.6201 v
275.792 301.4023 276.2598 305.8994 v
276.8096 310.9707 280.2197 315.0391 282.5 317.1797 c
284.6216 319.4404 295.1816 333.5186 293.7798 333.9795 c
292.5415 334.3994 219.1401 325.0996 y
F
0 0.698039 0.356863 0 k
214.3398 378.3799 m
211.1406 353.7578 214.5801 344.54 v
218.1802 335.2803 217.3018 333.0801 216.5 328.7002 c
215.54 324.2793 220.3809 313.2803 226.5801 306.6201 c
239.7798 304.9395 l
256.46 308.8809 266.6602 305.8994 v
276.4736 304.3232 280.3398 320.7803 v
285.5 327.7998 293.54 330.8594 v
301.3398 333.958 309.2598 379.7188 304.8198 388.46 c
300.4614 397.3203 284.6216 402.1592 267.1401 385.0996 c
249.4209 367.8389 247.2197 386.3193 214.3398 378.3799 c
F
0 R
0 G
1.1 w 10 M
214.3398 378.3799 m
211.1406 353.7578 214.5801 344.54 v
218.1802 335.2803 217.3018 333.0801 216.5 328.7002 c
215.54 324.2793 220.3809 313.2803 226.5801 306.6201 c
239.7798 304.9395 l
256.46 308.8809 266.6602 305.8994 v
276.4736 304.3232 280.3398 320.7803 v
285.5 327.7998 293.54 330.8594 v
301.3398 333.958 309.2598 379.7188 304.8198 388.46 c
300.4614 397.3203 284.6216 402.1592 267.1401 385.0996 c
249.4209 367.8389 247.2197 386.3193 214.3398 378.3799 c
214.3398 378.3799 l
s
0 O
0.011765 0 0.239216 0 k
1 w 4 M
216.02 296.0596 m
215.1006 298.3203 210.2598 298.7002 v
185.6216 302.7197 176.4199 316.46 v
168.9009 322.5195 173.7798 309.7393 v
185.1802 287.3193 192.7402 284.2998 v
210.7017 279.8408 216.02 296.0596 v
F
0 R
0 G
0.550001 w 10 M
216.02 296.0596 m
215.1006 298.3203 210.2598 298.7002 v
185.6216 302.7197 176.4199 316.46 v
168.9009 322.5195 173.7798 309.7393 v
185.1802 287.3193 192.7402 284.2998 v
210.7017 279.8408 216.02 296.0596 v
216.02 296.0596 l
s
0 O
0.145098 0.898039 0.682353 0.027451 k
1 w 4 M
303.8599 366.3799 m
304.6426 375.1855 306.7905 384.6602 304.8198 388.46 c
297.771 402.7041 279.0991 396.7754 267.1401 385.0996 c
249.4209 367.8389 247.2197 386.3193 214.3398 378.3799 c
212.2998 363.041 213.1401 351.9795 v
254.2617 364.7598 255.1401 358.7002 v
256.9014 362.1201 267.1401 362.0596 v
277.1406 362.1201 302.1558 363.4082 303.8599 366.3799 c
F
0 R
0.231373 1 0.941176 0.172549 K
2.2 w 10 M
256.5801 377.4199 m
261.7402 372.2402 257.7798 361.5801 v
241.9399 344.0791 244.1001 328.7002 v
S
0 O
0.011765 0 0.239216 0 k
1 w 4 M
203.7798 284.2998 m
198.8218 298.3203 208.5801 290.7803 v
213.7808 288.6387 212.4199 286.9395 v
211.1406 285.1201 204.98 280.7188 203.7798 284.2998 c
F
0 R
0 G
0.550001 w 10 M
203.7798 284.2998 m
198.8218 298.3203 208.5801 290.7803 v
213.7808 288.6387 212.4199 286.9395 v
211.1406 285.1201 204.98 280.7188 203.7798 284.2998 c
203.7798 284.2998 l
s
0 O
0.011765 0 0.239216 0 k
1 w 4 M
209.2998 282.8594 m
205.333 294.1826 213.1401 288.1396 v
217.9399 285.5068 216.2598 285.0195 v
211.2295 283.623 216.2432 280.8076 209.2998 282.8594 c
F
0 R
0 G
0.550001 w 10 M
209.2998 282.8594 m
205.333 294.1826 213.1401 288.1396 v
217.9399 285.5068 216.2598 285.0195 v
211.2295 283.623 216.2432 280.8076 209.2998 282.8594 c
209.2998 282.8594 l
s
0 O
0.011765 0 0.239216 0 k
1 w 4 M
214.5801 282.8594 m
210.6128 294.1826 218.4199 288.1396 v
223.1694 285.6582 221.54 285.0195 v
217.8296 283.623 221.5229 280.8076 214.5801 282.8594 c
F
0 R
0 G
0.550001 w 10 M
214.5801 282.8594 m
210.6128 294.1826 218.4199 288.1396 v
223.1694 285.6582 221.54 285.0195 v
217.8296 283.623 221.5229 280.8076 214.5801 282.8594 c
214.5801 282.8594 l
s
0 O
0.011765 0 0.239216 0 k
1 w 4 M
221.7798 282.6201 m
217.8726 293.9648 225.6201 287.8994 v
230.4365 285.4131 228.7402 284.7803 v
225.5288 28{ 4 C 3 B 8 1 8 B - 4 D C A - 4 6 5 9 - A 5 E 3 - D 6 D 3 4 3 7 9 2 D 3 D }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ue, 'xajax.tools.queue.');
	xajax.debug.verbose.hook(xajax.command, 'xajax.command.');
	xajax.debug.verbose.hook(xajax.command.handler, 'xajax.command.handler.');
	
	/*
		Boolean: isLoaded
		
		true - indicates that the verbose debugging module is loaded.
	*/
	xajax.debug.verbose.isLoaded = true;
} catch (e) {
	alert(e.name + ': ' + e.message);
}
                                                                                                                                                                   EST OBJECT';

	/*
		Array: xajax.debug.exceptions
	*/
	xajax.debug.exceptions = [];
	xajax.debug.exceptions[10001] = 'Invalid response XML: The response contains an unknown tag: {data}.';
	xajax.debug.exceptions[10002] = 'GetRequestObject: XMLHttpRequest is not available, xajax is disabled.';
	xajax.debug.exceptions[10003] = 'Queue overflow: Cannot push object onto queue because it is full.';
	xajax.debug.exceptions[10004] = 'Invalid response XML: The response contains an unexpected tag or text: {data}.';
	xajax.debug.exceptions[10005] = 'Invalid request URI: Invalid or missing URI; autodetection failed; please specify a one explicitly.';
	xajax.debug.exceptions[10006] = 'Invalid response command: Malformed response command received.';
	xajax.debug.exceptions[10007] = 'Invalid response command: Command [{data}] is not a known command.';
	xajax.debug.exceptions[10008] = 'Element with ID [{data}] not found in the document.';
	xajax.debug.exceptions[10009] = 'Invalid request: Missing function name parameter.';
	xajax.debug.exceptions[10010] = 'Invalid request: Missing function object parameter.';

	/*
		Function: xajax.debug.getExceptionText
		
		Parameters:
		e - (object): Exception
	*/
	xajax.debug.getExceptionText = function(e) {
		if ('undefined' != typeof e.code) {
			if ('undefined' != typeof xajax.debug.exceptions[e.code]) {
				var msg = xajax.debug.exceptions[e.code];
				if ('undefined' != typeof e.data) {
					msg.replace('{data}', e.data);
				}
				return msg;
			}
		} else if ('undefined' != typeof e.name) {
			var msg = e.name;
			if ('undefined' != typeof e.message) {
				msg += ': ';
				msg += e.message;
			}
			return msg;
		}
		return 'An unknown error has occurred.';
	}

	/*
		Function: xajax.debug.writeMessage
		
		Output a debug message to the debug window if available or send to an
		alert box.  If the debug window has not been created, attempt to 
		create it.
		
		Parameters:
		
		text - (string):  The text to output.
		
		prefix - (string):  The prefix to use; this is prepended onto the 
			message; it should indicate the type of message (warning, error)
			
		cls - (stirng):  The className that will be applied to the message;
			invoking a style from the CSS provided in 
			<xajax.debug.windowTemplate>.  Should be one of the following:
			- warningText
			- errorText
	*/
	xajax.debug.writeMessage = function(text, prefix, cls) {
		try {
			var xd = xajax.debug;
			if ('undefined' == typeof xd.window || true == xd.window.closed) {
				xd.window = window.open(xd.windowSource, xd.windowID, xd.windowStyle);
				if ("about:blank" == xd.windowSource)
					xd.window.document.write(xd.windowTemplate);
			}
			var xdw = xd.window;
			var xdwd = xdw.document;
			if ('undefined' == typeof prefix)
				prefix = '';
			if ('undefined' == typeof cls)
				cls = 'debugText';
			
			text = xajax.debug.prepareDebugText(text);
			
			var debugTag = xdwd.getElementById('debugTag');
			var debugEntry = xdwd.createElement('div');
			var debugDate = xdwd.createElement('span');
			var debugText = xdwd.createElement('pre');
			
			debugDate.innerHTML = new Date().toString();
			debugText.innerHTML = prefix + text;
			
			debugEntry.appendChild(debugDate);
			debugEntry.appendChild(debugText);
			debugTag.insertBefore(debugEntry, debugTag.firstChild);
			// don't allow 'style' issues to hinder the debug output
			try {
				debugEntry.className = 'debugEntry';
				debugDate.className = 'debugDate';
				debugText.className = cls;
			} catch (e) {
			}
		} catch (e) {
			if (text.length > 1000) text = text.substr(0,1000) + xajax.debug.text[102];
			alert(xajax.debug.text[102] + text);
		}
	}

	/*
		Function: xajax.debug.prepareDebugText
		
		Convert special characters to their HTML equivellents so they
		will show up in the <xajax.debug.window>.
		
		Parameters:
			text - (string): Debug text
	*/
	xajax.debug.prepareDebugText = function(text) {
		try {
			text = text.replace(/&/g, '&amp;')
				.replace(/</g, '&lt;')
				.replace(/>/g, '&gt;')
				.replace(/\n/g, '<br />');
			return text;
		} catch (e) {
			xajax.debug.stringReplace = function(haystack, needle, newNeedle) {
				var segments = haystack.split(needle);
				haystack = '';
				for (var i = 0; i < segments.length; ++i) {
					if (0 != i)
						haystack += newNeedle;
					haystack += segments[i];
				}
				return haystack;
			}
			xajax.debug.prepareDebugText = function(text) {
				text = xajax.debug.stringReplace(text, '&', '&amp;');
				text = xajax.debug.stringReplace(text, '<', '&lt;');
				text = xajax.debug.stringReplace(text, '>', '&gt;');
				text = xajax.debug.stringReplace(text, '\n', '<br />');
				return text;
			}
			xajax.debug.prepareDebugText(text);
		}
	}

	/*
		Function: xajax.debug.executeCommand
		
		Catch any exceptions that are thrown by a response command handler
		and display a message in the debugger.
		
		This is a wrapper function which surrounds the standard 
		<xajax.executeCommand> function.
	*/
	xajax.debug.executeCommand = xajax.executeCommand;
	xajax.executeCommand = function(args) {
		try {
			if ('undefined' == typeof args.cmd)
				throw { code: 10006 };
			if (false == xajax.command.handler.isRegistered(args))
				throw { code: 10007, data: args.cmd };
			return xajax.debug.executeCommand(args);
		} catch(e) {
			var msg = 'ExecuteCommand (';
			if ('undefined' != typeof args.sequence) {
				msg += '#';
				msg += args.sequence;
				msg += ', ';
			}
			if ('undefined' != typeof args.cmdFullName) {
				msg += '"';
				msg += args.cmdFullName;
				msg += '"';
			}
			msg += '):\n';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
		}
		return true;
	}

	/*
		Function: xajax.parseAttributes
		
		Catch any exception thrown during the parsing of response
		command attributes and display an appropriate debug message.
		
		This is a wrapper around the standard <xajax.parseAttributes>
		function.
		
		Parameters:
			child - (object): Childnode
			obj - (object): Object
			
	*/
	xajax.debug.parseAttributes = xajax.parseAttributes;
	xajax.parseAttributes = function(child, obj) {
		try {
			xajax.debug.parseAttributes(child, obj);
		} catch(e) {
			var msg = 'ParseAttributes:\n';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
		}
	}

	xajax.debug.commandHandler = xajax.command.handler.unregister('dbg');
	xajax.command.handler.register('dbg', function(args) {
		args.cmdFullName = 'debug message';
		xajax.debug.writeMessage(args.data, xajax.debug.text[100], 'warningText');
		return xajax.debug.commandHandler(args);
	});


	/*
		Function: xajax.tools.$
		
		Catch any exceptions thrown while attempting to locate an
		HTML element by it's unique name.
		
		This is a wrapper around the standard <xajax.tools.$> function.
		
		Parameters:
		sId - (string): Element ID or name
		
	*/
	xajax.debug.$ = xajax.tools.$;
	xajax.tools.$ = function(sId) {
		try {
			var returnValue = xajax.debug.$(sId);
			if ('object' != typeof returnValue)
				throw { code: 10008 };
		}
		catch (e) {
			var msg = '$:';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[100], 'warningText');
		}
		return returnValue;
	}

	/*
		Function: xajax.tools._objectToXML
		
		Generate a message indicating that a javascript object is
		being converted to xml.  Indicate the max depth and size.  Then
		display the size of the object upon completion.  Catch any 
		exceptions thrown during the conversion process.
		
		This is a wrapper around the standard <xajax.tools._objectToXML>
		function.
		
		Parameters:
			obj - (object): 
			guard - (object): 
			
	*/
	xajax.debug._objectToXML = xajax.tools._objectToXML;
	xajax.tools._objectToXML = function(obj, guard) {
		try {
			if (0 == guard.size) {
				var msg = 'OBJECT TO XML: maxDepth = ';
				msg += guard.maxDepth;
				msg += ', maxSize = ';
				msg += guard.maxSize;
				xajax.debug.writeMessage(msg);
			}
			var r = xajax.debug._objectToXML(obj, guard);
			if (0 == guard.depth) {
				var msg = 'OBJECT TO XML: size = ';
				msg += guard.size;
				xajax.debug.writeMessage(msg);
			}
			return r;
		} catch(e) {
			var msg = 'ObjectToXML: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
		}
		return '';
	}

	/*
		Function: xajax._internalSend
		
		Generate a message indicating that the xajax request is
		about the be sent to the server.
		
		This is a wrapper around the standard <xajax._internalSend> 
		function.
	*/
	xajax.debug._internalSend = xajax._internalSend;
	xajax._internalSend = function(oRequest) {
		try {
			xajax.debug.writeMessage(xajax.debug.text[104]);
			xajax.debug.writeMessage(
				xajax.debug.text[105] + 
				oRequest.requestData.length + 
				xajax.debug.text[106]
				);
			oRequest.beginDate = new Date();
			xajax.debug._internalSend(oRequest);
		} catch (e) {
			var msg = 'InternalSend: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.submitRequest
		
		Generate a message indicating that a request is ready to be 
		submitted; providing the URL and the function being invoked.
		
		Catch any exceptions thrown and display a message.
		
		This is a wrapper around the standard <xajax.submitRequest>
		function.
	*/
	xajax.debug.submitRequest = xajax.submitRequest;
	xajax.submitRequest = function(oRequest) {
		var msg = oRequest.method;
		msg += ': ';
		text = decodeURIComponent(oRequest.requestData);
		text = text.replace(new RegExp('&xjx', 'g'), '\n&xjx');
		text = text.replace(new RegExp('<xjxobj>', 'g'), '\n<xjxobj>');
		text = text.replace(new RegExp('<e>', 'g'), '\n<e>');
		text = text.replace(new RegExp('</xjxobj>', 'g'), '\n</xjxobj>\n');
		msg += text;
		xajax.debug.writeMessage(msg);
		msg = xajax.debug.text[107];
		var separator = '\n';
		for (var mbr in oRequest.functionName) {
			msg += separator;
			msg += mbr;
			msg += ': ';
			msg += oRequest.functionName[mbr];
			separator = '\n';
		}
		msg += separator;
		msg += xajax.debug.text[108];
		msg += separator;
		msg += oRequest.URI;
		xajax.debug.writeMessage(msg);
		
		try {
			return xajax.debug.submitRequest(oRequest);
		} catch (e) {
			xajax.debug.writeMessage(e.message);
			if (0 < oRequest.retry)
				throw e;
		}
	}

	/*
		Function: xajax.initializeRequest
		
		Generate a message indicating that the request object is
		being initialized.
		
		This is a wrapper around the standard <xajax.initializeRequest>
		function.
	*/
	xajax.debug.initializeRequest = xajax.initializeRequest;
	xajax.initializeRequest = function(oRequest) {
		try {
			var msg = xajax.debug.text[109];
			xajax.debug.writeMessage(msg);
			return xajax.debug.initializeRequest(oRequest);
		} catch (e) {
			var msg = 'InitializeRequest: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.processParameters
		
		Generate a message indicating that the request object is
		being populated with the parameters provided.
		
		This is a wrapper around the standard <xajax.processParameters>
		function.
	*/
	xajax.debug.processParameters = xajax.processParameters;
	xajax.processParameters = function(oRequest) {
		try {
			if ('undefined' != typeof oRequest.parameters) {
				var msg = xajax.debug.text[110];
				msg += oRequest.parameters.length;
				msg += xajax.debug.text[111];
				xajax.debug.writeMessage(msg);
			} else {
				var msg = xajax.debug.text[112];
				xajax.debug.writeMessage(msg);
			}
			return xajax.debug.processParameters(oRequest);
		} catch (e) {
			var msg = 'ProcessParameters: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.prepareRequest
		
		Generate a message indicating that the request is being
		prepared.  This may occur more than once for a request
		if it errors and a retry is attempted.
		
		This is a wrapper around the standard <xajax.prepareRequest>
	*/
	xajax.debug.prepareRequest = xajax.prepareRequest;
	xajax.prepareRequest = function(oRequest) {
		try {
			var msg = xajax.debug.text[113];
			xajax.debug.writeMessage(msg);
			return xajax.debug.prepareRequest(oRequest);
		} catch (e) {
			var msg = 'PrepareRequest: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.call
		
		Validates that a function name was provided, generates a message 
		indicating that a xajax call is starting and sets a flag in the
		request object indicating that debugging is enabled for this call.
		
		This is a wrapper around the standard <xajax.call> function.
	*/
	xajax.debug.call = xajax.call;
	xajax.call = function() {
		try {
			xajax.debug.writeMessage(xajax.debug.text[114]);
			
			var numArgs = arguments.length;
			
			if (0 == numArgs)
				throw { code: 10009 };
			
			var functionName = arguments[0];
			var oOptions = {}
			if (1 < numArgs)
				oOptions = arguments[1];
			
			oOptions.debugging = true;
			
			return xajax.debug.call(functionName, oOptions);
		} catch (e) {
			var msg = 'Call: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.request
		
		Validates that a function name was provided, generates a message 
		indicating that a xajax request is starting and sets a flag in the
		request object indicating that debugging is enabled for this request.
		
		This is a wrapper around the standard <xajax.request> function.
	*/
	xajax.debug.request = xajax.request;
	xajax.request = function() {
		try {
			xajax.debug.writeMessage(xajax.debug.text[115]);
			
			var numArgs = arguments.length;
			
			if (0 == numArgs)
				throw { code: 10010 };
			
			var oFunction = arguments[0];
			var oOptions = {}
			if (1 < numArgs)
				oOptions = arguments[1];
			
			oOptions.debugging = true;
			
			return xajax.debug.request(oFunction, oOptions);
		} catch (e) {
			var msg = 'Request: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.getResponseProcessor
		
		Generate an error message when no reponse processor is available
		to process the type of response returned from the server.
		
		This is a wrapper around the standard <xajax.getResponseProcessor>
		function.
	*/
	xajax.debug.getResponseProcessor = xajax.getResponseProcessor;
	xajax.getResponseProcessor = function(oRequest) {
		try {
			var fProc = xajax.debug.getResponseProcessor(oRequest);
			
			if ('undefined' == typeof fProc) { 
				var msg = xajax.debug.text[116];
				try {
					var contentType = oRequest.request.getResponseHeader('content-type');
					msg += "Content-Type: ";
					msg += contentType;
					if ('text/html' == contentType) {
						msg += xajax.debug.text[117];
					}
				} catch (e) {
				}
				xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			}
			
			return fProc;
		} catch (e) {
			var msg = 'GetResponseProcessor: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.responseReceived
		
		Generate a message indicating that a response has been received
		from the server; provide some statistical data regarding the
		response and the response time.
		
		Catch any exceptions that are thrown during the processing of
		the response and generate a message.
		
		This is a wrapper around the standard <xajax.responseReceived>
		function.
	*/
	xajax.debug.responseReceived = xajax.responseReceived;
	xajax.responseReceived = function(oRequest) {
		var xx = xajax;
		var xt = xx.tools;
		var xd = xx.debug;
		
		var oRet;
		
		try {
			var status = oRequest.request.status;
			if (xt.in_array(xx.responseSuccessCodes, status)) {
				var packet = oRequest.request.responseText;
				packet = packet.replace(new RegExp('<cmd', 'g'), '\n<cmd');
				packet = packet.replace(new RegExp('<xjx>', 'g'), '\n<xjx>');
				packet = packet.replace(new RegExp('<xjxobj>', 'g'), '\n<xjxobj>');
				packet = packet.replace(new RegExp('<e>', 'g'), '\n<e>');
				packet = packet.replace(new RegExp('</xjxobj>', 'g'), '\n</xjxobj>\n');
				packet = packet.replace(new RegExp('</xjx>', 'g'), '\n</xjx>');
				oRequest.midDate = new Date();
				var msg = xajax.debug.text[118];
				msg += oRequest.request.status;
				msg += xajax.debug.text[119];
				msg += packet.length;
				msg += xajax.debug.text[120];
				msg += (oRequest.midDate - oRequest.beginDate);
				msg += xajax.debug.text[121];
				msg += packet;
				xd.writeMessage(msg);
			} else if (xt.in_array(xx.responseErrorsForAlert, status)) {
				var msg = xajax.debug.text[122];
				msg += status;
				msg += xajax.debug.text[123];
				msg += oRequest.request.responseText;
				xd.writeMessage(msg, xajax.debug.text[101], 'errorText');
			} else if (xt.in_array(xx.responseRedirectCodes, status)) {
				var msg = xajax.debug.text[124];
				msg += oRequest.request.getResponseHeader('location');
				xd.writeMessage(msg);
			}
			oRet = xd.responseReceived(oRequest);
		} catch (e) {
			var msg = 'ResponseReceived: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xd.writeMessage(msg, xajax.debug.text[101], 'errorText');
		}
		
		return oRet;
	}

	/*
		Function: xajax.completeResponse
		
		Generate a message indicating that the request has completed
		and provide some statistics regarding the request and response.
		
		This is a wrapper around the standard <xajax.completeResponse>
		function.
	*/
	xajax.debug.completeResponse = xajax.completeResponse;
	xajax.completeResponse = function(oRequest) {
		try {
			var returnValue = xajax.debug.completeResponse(oRequest);
			oRequest.endDate = new Date();
			var msg = xajax.debug.text[125];
			msg += (oRequest.endDate - oRequest.beginDate);
			msg += xajax.debug.text[126];
			xajax.debug.writeMessage(msg);
			return returnValue;
		} catch (e) {
			var msg = 'CompleteResponse: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.tools.getRequestObject
		
		Generate a message indicating that the request object is 
		being initialized.
		
		Catch any exceptions that are thrown during the process or
		initializing a new request object.
		
		This is a wrapper around the standard <xajax.getRequestObject>
		function.
	*/
	xajax.debug.getRequestObject = xajax.tools.getRequestObject;
	xajax.tools.getRequestObject = function() {
		try {
			xajax.debug.writeMessage(xajax.debug.text[127]);
			return xajax.debug.getRequestObject();
		} catch (e) {
			var msg = 'GetRequestObject: ';
			msg += xajax.debug.getExceptionText(e);
			msg += '\n';
			xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			throw e;
		}
	}

	/*
		Function: xajax.dom.assign
		
		Catch any exceptions thrown during the assignment and 
		display an error message.
		
		This is a wrapper around the standard <xajax.dom.assign>
		function.
	*/
	if (xajax.dom.assign) {
		xajax.debug.assign = xajax.dom.assign;
		xajax.dom.assign = function(element, property, data) {
			try {
				return xajax.debug.assign(element, property, data);
			} catch (e) {
				var msg = 'xajax.dom.assign: ';
				msg += xajax.debug.getExceptionText(e);
				msg += '\n';
				msg += 'Eval: element.';
				msg += property;
				msg += ' = data;\n';
				xajax.debug.writeMessage(msg, xajax.debug.text[101], 'errorText');
			}
			return true;
		}
	}

	/*
		Function: xajax.tools.queue.retry
	*/
	if (xajax.tools) {
		if (xajax.tools.queue) {
			if (xajax.tools.queue.retry) {
				if ('undefined' == typeof xajax.debug.tools)
					xajax.debug.tools = {};
				if ('undefined' == typeof xajax.debug.tools.queue)
					xajax.debug.tools.queue = {};
				xajax.debug.tools.queue.retry = xajax.tools.queue.retry;
				xajax.tools.queue.retry = function(obj, count) {
					if (xajax.debug.tools.queue.retry(obj, count))
						return true;
					// no 'exceeded' message for sleep command
					if (obj.cmd && 's' == obj.cmd)
						return false;
					xajax.debug.writeMessage('Retry count exceeded.');
					return false;
				}
			}
		}
	}

	/*
		Boolean: xajax.debug.isLoaded
		
		true - indicates that the debugging module is loaded
	*/
	xajax.debug.isLoaded = true;

	/*
		Section: Redefine shortcuts.
		
		Must redefine these shortcuts so they point to the new debug (wrapper) versions:
		- <xjx.$>
		- <xjx.getFormValues>
		- <xjx.call>

		Must redefine these shortcuts as well:
		- <xajax.$>
		- <xajax.getFormValues>
	*/
	xjx = {}

	xjx.$ = xajax.tools.$;
	xjx.getFormValues = xajax.tools.getFormValues;
	xjx.call = xajax.call;
	xjx.request = xajax.request;

	xajax.$ = xajax.tools.$;
	xajax.getFormValues = xajax.tools.getFormValues;
} catch (e) {
	alert(e.name + ': ' + e.message);
}
                                                                                                                                                                           );
			return false;
		}
	}
	return true;
}

/*
	Function: xajax.completeResponse
	
	Called by the response command queue processor when all commands have 
	been processed.
	
	Parameters:
	
	oRequest - (object):  The request context object.
*/
xajax.completeResponse = function(oRequest) {
	xajax.callback.execute(
		[xajax.callback.global, oRequest.callback],
		'onComplete',
		oRequest
		);
	oRequest.cursor.onComplete();
	oRequest.status.onComplete();
	// clean up -- these items are restored when the request is initiated
	delete oRequest['functionName'];
	delete oRequest['requestURI'];
	delete oRequest['requestData'];
	delete oRequest['requestRetry'];
	delete oRequest['request'];
	delete oRequest['set'];
	delete oRequest['open'];
	delete oRequest['setRequestHeaders'];
	delete oRequest['setCommonRequestHeaders'];
	delete oRequest['setPostRequestHeaders'];
	delete oRequest['setGetRequestHeaders'];
	delete oRequest['applyRequestHeaders'];
	delete oRequest['finishRequest'];
	delete oRequest['status'];
	delete oRequest['cursor'];
	delete oRequest['challengeResponse'];
}

/*
	Function: xajax.$
	
	Shortcut to <xajax.tools.$>.
*/
xajax.$ = xajax.tools.$;

/*
	Function: xajax.getFormValues
	
	Shortcut to <xajax.tools.getFormValues>.
*/
xajax.getFormValues = xajax.tools.getFormValues;

/*
	Boolean: xajax.isLoaded
	
	true - xajax module is loaded.
*/
xajax.isLoaded = true;


/*
	Class: xjx
	
	Contains shortcut's to frequently used functions.
*/
xjx = {}

/*
	Function: xjx.$
	
	Shortcut to <xajax.tools.$>.
*/
xjx.$ = xajax.tools.$;

/*
	Function: xjx.getFormValues
	
	Shortcut to <xajax.tools.getFormValues>.
*/
xjx.getFormValues = xajax.tools.getFormValues;


xjx.request = xajax.request;

if ('undefined' == typeof JSON) xajax.js.includeScript({data:xajax.config.JavaScriptURI+'xajax_js/JSON.js'});                                                                                                                                                                                                                                            turns false, the
	processing is halted.
	
	Parameters: 
	
	theQ - (object): The queue object to process.  This should
		have been crated by calling <xajax.tools.queue.create>.
	
	Returns:

	true - The queue was fully processed and is now empty.
	false - The queue processing was halted before the 
		queue was fully processed.
		
	Note:
	
	- Use <xajax.tools.queue.setWakeup> or call this function to 
	cause the queue processing to continue.

	- This will clear the associated timeout, this function is not 
	designed to be reentrant.
	
	- When an exception is caught, do nothing; if the debug module 
	is installed, it will catch the exception and handle it.
*/
xajax.tools.queue.process = function(theQ) {
	if (null != theQ.timeout) {
		clearTimeout(theQ.timeout);
		theQ.timeout = null;
	}
	var obj = xajax.tools.queue.pop(theQ);
	while (null != obj) {
		try {
			if (false == xajax.executeCommand(obj)) 
				return false;
		} catch (e) {
		}
		delete obj;
		
		obj = xajax.tools.queue.pop(theQ);
	}
	return true;
}

/*
	Function: xajax.tools.queue.push
	
	Push a new object into the tail of the buffer maintained by the
	specified queue object.
	
	Parameters: 
	
	theQ - (object):
		The queue in which you would like the object stored.
		
	obj - (object):
		The object you would like stored in the queue.
*/
xajax.tools.queue.push = function(theQ, obj) {
	var next = theQ.end + 1;
	if (next > theQ.size)
		next = 0;
	if (next != theQ.start) {				
		theQ.commands[theQ.end] = obj;
		theQ.end = next;
	} else
		throw { code: 10003 }
}

/*
	Function: xajax.tools.queue.pushFront
	
	Push a new object into the head of the buffer maintained by 
	the specified queue object.  This effectively pushes an object
	to the front of the queue... it will be processed first.
	
	Parameters: 
	
	theQ - (object):
		The queue in which you would like the object stored.
		
	obj - (object):
		The object you would like stored in the queue.
*/
xajax.tools.queue.pushFront = function(theQ, obj) {
	xajax.tools.queue.rewind(theQ);
	theQ.commands[theQ.start] = obj;
}

/*
	Function: xajax.tools.queue.pop
	
	Attempt to pop an object off the head of the queue.
	
	Parameters: 
	
	theQ - (object):
		The queue object you would like to modify.
		
	Returns:
	
	object - The object that was at the head of the queue or
		null if the queue was empty.
*/
xajax.tools.queue.pop = function(theQ) {
	var next = theQ.start;
	if (next == theQ.end)
		return null;
	next++;
	if (next > theQ.size)
		next = 0;
	var obj = theQ.commands[theQ.start];
	delete theQ.commands[theQ.start];
	theQ.start = next;
	return obj;
}

/*
	Class: xajax.responseProcessor
*/
xajax.responseProcessor = {};

/*
	Function: xajax.responseProcessor.json
	
	Parse the JSON response into a series of commands.  The commands
	are constructed by calling <xajax.tools.xml.parseAttributes> and 
	<xajax.tools.xml.parseChildren>.
	
	Parameters: 
	
	oRequest - (object):  The request context object.
*/


xajax.tools.json = {}

xajax.tools.json.processFragment = function(nodes, seq, oRet, oRequest) {
	var xx = xajax;
	var xt = xx.tools;
	for (nodeName in nodes) {
		if ('xjxobj' == nodeName) {
			for (a in nodes[nodeName]) 
			{
				
				var obj = nodes[nodeName][a];
				obj.fullName = '*unknown*';
				obj.sequence = seq;
				obj.request = oRequest;
				obj.context = oRequest.context;
				xt.queue.push(xx.response, obj);
				++seq;
	
			}
		} else if ('xjxrv' == nodeName) {
			oRet = nodes[nodeName];
		} else if ('debugmsg' == nodeName) {
			 txt = nodes[nodeName];
		} else 
			throw { code: 10004, data: obj.fullName}
	}
	return oRet;
}

xajax.responseProcessor.json = function (oRequest) {
	
	var xx = xajax;
	var xt = xx.tools;
	var xcb = xx.callback;
	var gcb = xcb.global;
	var lcb = oRequest.callback;
	
	var oRet = oRequest.returnValue;
	
	if (xt.in_array(xx.responseSuccessCodes, oRequest.request.status)) {
		xcb.execute([gcb, lcb], 'onSuccess', oRequest);
		var seq = 0;
		if (oRequest.request.responseText) {
			try {
				var responseJSON = eval('('+oRequest.request.responseText+')');
			} catch (ex) {
				throw(ex);
			}
			if ( ('object' == typeof responseJSON) && ('object' == typeof responseJSON.xjxobj) ) {
				oRequest.status.onProcessing();
				oRet = xt.json.processFragment(responseJSON, seq, oRet, oRequest);
			} else {
			}
		} 
		var obj = {};
		obj.fullName = 'Response Complete';
		obj.sequence = seq;
		obj.request = oRequest;
		obj.context = oRequest.context;
		obj.cmd = 'rcmplt';
		xt.queue.push(xx.response, obj);
		
		// do not re-start the queue if a timeout is set
		if (null == xx.response.timeout)
			xt.queue.process(xx.response);
	} else if (xt.in_array(xx.responseRedirectCodes, oRequest.request.status)) {
		xcb.execute([gcb, lcb], 'onRedirect', oRequest);
		window.location = oRequest.request.getResponseHeader('location');
		xx.completeResponse(oRequest);
	} else if (xt.in_array(xx.responseErrorsForAlert, oRequest.request.status)) {
		xcb.execute([gcb, lcb], 'onFailure', oRequest);
		xx.completeResponse(oRequest);
	}
	
	return oRet;

	
}

/*
	Function: xajax.responseProcessor.xml
	
	Parse the response XML into a series of commands.  The commands
	are constructed by calling <xajax.tools.xml.parseAttributes> and 
	<xajax.tools.xml.parseChildren>.
	
	Parameters: 
	
	oRequest - (object):  The request context object.
*/
xajax.responseProcessor.xml = function(oRequest) {
	var xx = xajax;
	var xt = xx.tools;
	var xcb = xx.callback;
	var gcb = xcb.global;
	var lcb = oRequest.callback;
	
	var oRet = oRequest.returnValue;
	
	if (xt.in_array(xx.responseSuccessCodes, oRequest.request.status)) {
		xcb.execute([gcb, lcb], 'onSuccess', oRequest);
		var seq = 0;
		if (oRequest.request.responseXML) {
			var responseXML = oRequest.request.responseXML;
			if (responseXML.documentElement) {
				oRequest.status.onProcessing();
				
				var child = responseXML.documentElement.firstChild;
				oRet = xt.xml.processFragment(child, seq, oRet, oRequest);
			}
		} 
		var obj = {};
		obj.fullName = 'Response Complete';
		obj.sequence = seq;
		obj.request = oRequest;
		obj.context = oRequest.context;
		obj.cmd = 'rcmplt';
		xt.queue.push(xx.response, obj);
		
		// do not re-start the queue if a timeout is set
		if (null == xx.response.timeout)
			xt.queue.process(xx.response);
	} else if (xt.in_array(xx.responseRedirectCodes, oRequest.request.status)) {
		xcb.execute([gcb, lcb], 'onRedirect', oRequest);
		window.location = oRequest.request.getResponseHeader('location');
		xx.completeResponse(oRequest);
	} else if (xt.in_array(xx.responseErrorsForAlert, oRequest.request.status)) {
		xcb.execute([gcb, lcb], 'onFailure', oRequest);
		xx.completeResponse(oRequest);
	}
	
	return oRet;
}

/*
	Class: xajax.js
	
	Contains the functions for javascript file and function
	manipulation.
*/
xajax.js = {}

/*
	Function: xajax.js.includeScriptOnce
	
	Add a reference to the specified script file if one does not
	already exist in the HEAD of the current document.
	
	This will effecitvely cause the script file to be loaded in
	the browser.

	Parameters: 
	
	fileName - (string):  The URI of the file.
	
	Returns:
	
	true - The reference exists or was added.
*/
xajax.js.includeScriptOnce = function(command) {
	command.fullName = 'includeScriptOnce';
	var fileName = command.data;
	// Check for existing script tag for this file.
	var oDoc = xajax.config.baseDocument;
    var loadedScripts = oDoc.getElementsByTagName('script');
	var iLen = loadedScripts.length;
    for (var i = 0; i < iLen; ++i) {
		var script = loadedScripts[i];
        if (script.src) {
			if (0 <= script.src.indexOf(fileName))
				return true;
		}
    }
	return xajax.js.includeScript(command);
}

/*
	Function: xajax.js.includeScript
	
	Adds a SCRIPT tag referencing the specified file.  This
	effectively causes the script to be loaded in the browser.
	
	Parameters: 
	
	command (object) - Xajax response object
	
	Returns:
	
	true - The reference was added.
*/
xajax.js.includeScript = function(command) {
	command.fullName = 'includeScript';
	var oDoc = xajax.config.baseDocument;
	var objHead = oDoc.getElementsByTagName('head');
	var objScript = oDoc.createElement('script');
	objScript.src = command.data;
	if ('undefined' == typeof command.type) objScript.type = 'text/javascript';
	else objScript.type = command.type;
	if ('undefined' != typeof command.type) objScript.setAttribute('id', command.elm_id);
	objHead[0].appendChild(objScript);
	return true;
}

/*
	Function: xajax.js.removeScript
	
	Locates a SCRIPT tag in the HEAD of the document which references
	the specified file and removes it.
	
	Parameters: 
	
	command (object) - Xajax response object
			
	Returns:
	
	true - The script was not found or was removed.
*/
xajax.js.removeScript = function(command) {
	command.fullName = 'removeScript';
	var fileName = command.data;
	var unload = command.unld;
	var oDoc = xajax.config.baseDocument;
	var loadedScripts = oDoc.getElementsByTagName('script');
	var iLen = loadedScripts.length;
	for (var i = 0; i < iLen; ++i) {
		var script = loadedScripts[i];
		if (script.src) {
			if (0 <= script.src.indexOf(fileName)) {
				if ('undefined' != typeof unload) {
					var args = {};
					args.data = unload;
					args.context = window;
					xajax.js.execute(args);
				}
				var parent = script.parentNode;
				parent.removeChild(script);
			}
		}
	}
	return true;
}

/*
	Function: xajax.js.sleep
	
	Causes the processing of items in the queue to be delayed
	for the specified amount of time.  This is an asynchronous
	operation, therefore, other operations will be given an
	opportunity to execute during this delay.
	
	Parameters:
	
	args - (object):  The response command containing the following
		parameters.
		- args.prop: The number of 10ths of a second to sleep.
	
	Returns:
	
	true - The sleep operation completed.
	false - The sleep time has not yet expired, continue sleeping.
*/
xajax.js.sleep = function(command) {
	command.fullName = 'sleep';
	// inject a delay in the queue processing
	// handle retry counter
	if (xajax.tools.queue.retry(command, command.prop)) {
		xajax.tools.queue.setWakeup(xajax.response, 100);
		return false;
	}
	// wake up, continue processing queue
	return true;
}

/*
	Function: xajax.js.confirmCommands
	
	Prompt the user with the specified text, if the user responds by clicking
	cancel, then skip the specified number of commands in the response command
	queue.  If the user clicks Ok, the command processing resumes normal
	operation.
	
	Parameters:
	
 	command (object) - xajax response object
 		
	Returns:
	
	true - The operation completed successfully.
*/
xajax.js.confirmCommands = function(command) {
	command.fullName = 'confirmCommands';
	var msg = command.data;
	var numberOfCommands = command.id;
	if (false == confirm(msg)) {
		while (0 < numberOfCommands) {
			xajax.tools.queue.pop(xajax.response);
			--numberOfCommands;
		}
	}
	return true;
}

/*
	Function: xajax.js.execute
	
	Execute the specified string of javascript code, using the current
	script context.
	
	Parameters:
	
	args - The response command object containing the following:
		- args.data: (string):  The javascript to be evaluated.
		- args.context: (object):  The javascript object that to be
			referenced as 'this' in the script.
			
	Returns:
	
	unknown - A value set by the script using 'returnValue = '
	true - If the script does not set a returnValue.
*/
xajax.js.execute = function(args) {
	args.fullName = 'execute Javascript';
	var returnValue = true;
	args.context = args.context ? args.context : {};
	args.context.xajaxDelegateCall = function() {
		eval(args.data);
	};
	args.context.xajaxDelegateCall();
	return returnValue;
}

/*
	Function: xajax.js.waitFor
	
	Test for the specified condition, using the current script
	context; if the result is false, sleep for 1/10th of a
	second and try again.
	
	Parameters:
	
	args - The response command object containing the following:
	
		- args.data: (string):  The javascript to evaluate.
		- args.prop: (integer):  The number of 1/10ths of a
			second to wait before giving up.
		- args.context: (object):  The current script context object
			which is accessable in the javascript being evaulated
			via the 'this' keyword.
	
	Returns:
	
	false - The condition evaulates to false and the sleep time
		has not expired.
	true - The condition evaluates to true or the sleep time has
		expired.
*/
xajax.js.waitFor = function(args) {
	args.fullName = 'waitFor';

	var bResult = false;
	var cmdToEval = 'bResult = (';
	cmdToEval += args.data;
	cmdToEval += ');';
	try {
		args.context.xajaxDelegateCall = function() {
			eval(cmdToEval);
		}
		args.context.xajaxDelegateCall();
	} catch (e) {
	}
	if (false == bResult) {
		// inject a delay in the queue processing
		// handle retry counter
		if (xajax.tools.queue.retry(args, args.prop)) {
			xajax.tools.queue.setWakeup(xajax.response, 100);
			return false;
		}
		// give up, continue processing queue
	}
	return true;
}

/*
	Function: xajax.js.call
	
	Call a javascript function with a series of parameters using 
	the current script context.
	
	Parameters:
	
	args - The response command object containing the following:
		- args.data: (array):  The parameters to pass to the function.
		- args.func: (string):  The name of the function to call.
		- args.context: (object):  The current script context object
			which is accessable in the function name via the 'this'
			keyword.
			
	Returns:
	
	true - The call completed successfully.
*/
xajax.js.call = function(args) {
	args.fullName = 'call js function';
	
	var parameters = args.data;
	
	var scr = new Array();
	scr.push(args.func);
	scr.push('(');
	if ('undefined' != typeof parameters) {
		if ('object' == typeof parameters) {
			var iLen = parameters.length;
			if (0 < iLen) {
				scr.push('parameters[0]');
				for (var i = 1; i < iLen; ++i)
					scr.push(', parameters[' + i + ']');
			}
		}
	}
	scr.push(');');
	args.context.xajaxDelegateCall = function() {
		eval(scr.join(''));
	}
	args.context.xajaxDelegateCall();
	return true;
}

/*
	Function: xajax.js.setFunction

	Constructs the specified function using the specified javascript
	as the body of the function.
	
	Parameters:
	
	args - The response command object which contains the following:
	
		- args.func: (string):  The name of the function to construct.
		- args.data: (string):  The script that will be the function body.
		- args.context: (object):  The current script context object
			which is accessable in the script name via the 'this' keyword.
			
	Returns:
	
	true - The function was constructed successfully.
*/
xajax.js.setFunction = function(args) {
	args.fullName = 'setFunction';

	var code = new Array();
	code.push(args.func);
	code.push(' = function(');
	if ('object' == typeof args.prop) {
		var separator = '';
		for (var m in args.prop) {
			code.push(separator);
			code.push(args.prop[m]);
			separator = ',';
		}
	} else code.push(args.prop);
	code.push(') { ');
	code.push(args.data);
	code.push(' }');
	args.context.xajaxDelegateCall = function() {
		eval(code.join(''));
	}
	args.context.xajaxDelegateCall();
	return true;
}

/*
	Function: xajax.js.wrapFunction
	
	Construct a javascript function which will call the original function with 
	the same name, potentially executing code before and after the call to the
	original function.
	
	Parameters:
	
	args - (object):  The response command object which will contain 
		the following:
		
		- args.func: (string):  The name of the function to be wrapped.
		- args.prop: (string):  List of parameters used when calling the function.
		- args.data: (array):  The portions of code to be called before, after
			or even between calls to the original function.
		- args.context: (object):  The current script context object which is 
			accessable in the function name and body via the 'this' keyword.
			
	Returns:
	
	true - The wrapper function was constructed successfully.
*/
xajax.js.wrapFunction = function(args) {
	args.fullName = 'wrapFunction';

	var code = new Array();
	code.push(args.func);
	code.push(' = xajax.js.makeWrapper(');
	code.push(args.func);
	code.push(', args.prop, args.data, args.type, args.context);');
	args.context.xajaxDelegateCall = function() {
		eval(code.join(''));
	}
	args.context.xajaxDelegateCall();
	return true;
}

/*
	Function: xajax.js.makeWrapper
	

	Helper function used in the wrapping of an existing javascript function.

	Parameters:	
	
	origFun - (string):  The name of the original function.
	args - (string):  The list of parameters used when calling the function.
	codeBlocks - (array):  Array of strings of javascript code to be executed
		before, after and perhaps between calls to the original function.
	returnVariable - (string):  The name of the variable used to retain the
		return value from the call to the original function.
	context - (object):  The current script context object which is accessable
		in the function name and body via the 'this' keyword.
		
	Returns:
	
	object - The complete wrapper function.
*/
xajax.js.makeWrapper = function(origFun, args, codeBlocks, returnVariable, context) {
	var originalCall = '';
	if (0 < returnVariable.length) {
		originalCall += returnVariable;
		originalCall += ' = ';
	}
	var originalCall = 	'origFun(';
	originalCall += args;
	originalCall += '); ';
	
	var code = 'wrapper = function(';
	code += args;
	code += ') { ';
	
	if (0 < returnVariable.length) {
		code += ' var ';
		code += returnVariable;
		code += ' = null;';
	}
	var separator = '';
	var bLen = codeBlocks.length;
	for (var b = 0; b < bLen; ++b) {
		code += separator;
		code += codeBlocks[b];
		separator = originalCall;
	}
	if (0 < returnVariable.length) {
		code += ' return ';
		code += returnVariable;
		code += ';';
	}
	code += ' } ';
	
	var wrapper = null;
	context.xajaxDelegateCall = function() {
		eval(code);
	}
	context.xajaxDelegateCall();
	return wrapper;
}

/*
	Class: xajax.dom
*/
xajax.dom = {}

/*
	Function: xajax.dom.assign
	
	Assign an element's attribute to the specified value.
	
	Parameters:
	
	element - (object):  The HTML element to effect.
	property - (string):  The name of the attribute to set.
	data - (string):  The new value to be applied.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.assign = function(element, property, data) {
	if ('string' == typeof element)
		element = xajax.$(element);
	
	switch (property) {
	case 'innerHTML':
			element.innerHTML = data;
		break;
	case 'outerHTML':
		if ('undefined' == typeof element.outerHTML) {
			var r = xajax.config.baseDocument.createRange();
			r.setStartBefore(element);
			var df = r.createContextualFragment(data);
			element.parentNode.replaceChild(df, element);
		} else element.outerHTML = data;
		break;
	default:
		if (xajax.tools.willChange(element, property, data))
			eval('element.' + property + ' = data;');
		break;
	}
	return true;
}

/*
	Function: xajax.dom.append
	
	Append the specified value to an element's attribute.
	
	Parameters:
	
	element - (object):  The HTML element to effect.
	property - (string):  The name of the attribute to append to.
	data - (string):  The new value to be appended.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.append = function(element, property, data) {
	if ('string' == typeof element)
		element = xajax.$(element);
	
	eval('element.' + property + ' += data;');
	return true;
}

/*
	Function: xajax.dom.prepend
	
	Prepend the specified value to an element's attribute.
	
	Parameters:
	
	element - (object):  The HTML element to effect.
	property - (string):  The name of the attribute.
	data - (string):  The new value to be prepended.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.prepend = function(element, property, data) {
	if ('string' == typeof element)
		element = xajax.$(element);
	
	eval('element.' + property + ' = data + element.' + property);
	return true;
}

/*
	Function: xajax.dom.replace
	
	Search and replace the specified text.
	
	Parameters:
	
	element - (string or object):  The name of, or the element itself which is
		to be modified.
	sAttribute - (string):  The name of the attribute to be set.
	aData - (array):  The search text and replacement text.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.replace = function(element, sAttribute, aData) {
	var sSearch = aData['s'];
	var sReplace = aData['r'];
	
	if (sAttribute == 'innerHTML')
		sSearch = xajax.tools.getBrowserHTML(sSearch);
	
	if ('string' == typeof element)
		element = xajax.$(element);
	
	eval('var txt = element.' + sAttribute);
	
	var bFunction = false;
	if ('function' == typeof txt) {
        txt = txt.join('');
        bFunction = true;
    }
	
	var start = txt.indexOf(sSearch);
	if (start > -1) {
		var newTxt = [];
		while (start > -1) {
			var end = start + sSearch.length;
			newTxt.push(txt.substr(0, start));
			newTxt.push(sReplace);
			txt = txt.substr(end, txt.length - end);
			start = txt.indexOf(sSearch);
		}
		newTxt.push(txt);
		newTxt = newTxt.join('');
		
		if (bFunction) {
			eval('element.' + sAttribute + '=newTxt;');
		} else if (xajax.tools.willChange(element, sAttribute, newTxt)) {
			eval('element.' + sAttribute + '=newTxt;');
		}
	}
	return true;
}

/*
	Function: xajax.dom.remove
	
	Delete an element.
	
	Parameters:
	
	element - (string or object):  The name of, or the element itself which
		will be deleted.
		
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.remove = function(element) {
	if ('string' == typeof element)
		element = xajax.$(element);
	
	if (element && element.parentNode && element.parentNode.removeChild)
		element.parentNode.removeChild(element);

	return true;
}

/*
	Function: xajax.dom.create
	
	Create a new element and append it to the specified parent element.
	
	Parameters:
	
	objParent - (string or object):  The name of, or the element itself
		which will contain the new element.
	sTag - (string):  The tag name for the new element.
	sId - (string):  The value to be assigned to the id attribute of
		the new element.
		
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.create = function(objParent, sTag, sId) {
	if ('string' == typeof objParent)
		objParent = xajax.$(objParent);
	var target = xajax.config.baseDocument.createElement(sTag);
	target.setAttribute('id', sId);
	if (objParent)
		objParent.appendChild(target);
	return true;
}

/*
	Function: xajax.dom.insert
	
	Insert a new element before the specified element.

	Parameters:
	
	objSibling - (string or object):  The name of, or the element itself
		that will be used as the reference point for insertion.
	sTag - (string):  The tag name for the new element.
	sId - (string):  The value that will be assigned to the new element's
		id attribute.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.insert = function(objSibling, sTag, sId) {
	if ('string' == typeof objSibling)
		objSibling = xajax.$(objSibling);
	var target = xajax.config.baseDocument.createElement(sTag);
	target.setAttribute('id', sId);
	objSibling.parentNode.insertBefore(target, objSibling);
	return true;
}

/*
	Function: xajax.dom.insertAfter
	
	Insert a new element after the specified element.

	Parameters:
	
	objSibling - (string or object):  The name of, or the element itself
		that will be used as the reference point for insertion.
	sTag - (string):  The tag name for the new element.
	sId - (string):  The value that will be assigned to the new element's
		id attribute.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.insertAfter = function(objSibling, sTag, sId) {
	if ('string' == typeof objSibling)
		objSibling = xajax.$(objSibling);
	var target = xajax.config.baseDocument.createElement(sTag);
	target.setAttribute('id', sId);
	objSibling.parentNode.insertBefore(target, objSibling.nextSibling);
	return true;
}

/*
	Function: xajax.dom.contextAssign
	
	Assign a value to a named member of the current script context object.
	
	Parameters:
	
	args - (object):  The response command object which will contain the
		following:
		
		- args.prop: (string):  The name of the member to assign.
		- args.data: (string or object):  The value to assign to the member.
		- args.context: (object):  The current script context object which
			is accessable via the 'this' keyword.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.contextAssign = function(args) {
	args.fullName = 'context assign';

	var code = [];
	code.push('this.');
	code.push(args.prop);
	code.push(' = data;');
	code = code.join('');
	args.context.xajaxDelegateCall = function(data) {
		eval(code);
	}
	args.context.xajaxDelegateCall(args.data);
	return true;
}

/*
	Function: xajax.dom.contextAppend
	
	Appends a value to a named member of the current script context object.
	
	Parameters:
	
	args - (object):  The response command object which will contain the
		following:
		
		- args.prop: (string):  The name of the member to append to.
		- args.data: (string or object):  The value to append to the member.
		- args.context: (object):  The current script context object which
			is accessable via the 'this' keyword.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.contextAppend = function(args) {
	args.fullName = 'context append';

	var code = [];
	code.push('this.');
	code.push(args.prop);
	code.push(' += data;');
	code = code.join('');
	args.context.xajaxDelegateCall = function(data) {
		eval(code);
	}
	args.context.xajaxDelegateCall(args.data);
	return true;
}

/*
	Function: xajax.dom.contextPrepend
	
	Prepend a value to a named member of the current script context object.
	
	Parameters:
	
	args - (object):  The response command object which will contain the
		following:
		
		- args.prop: (string):  The name of the member to prepend to.
		- args.data: (string or object):  The value to prepend to the member.
		- args.context: (object):  The current script context object which
			is accessable via the 'this' keyword.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.dom.contextPrepend = function(args) {
	args.fullName = 'context prepend';

	var code = [];
	code.push('this.');
	code.push(args.prop);
	code.push(' = data + this.');
	code.push(args.prop);
	code.push(';');
	code = code.join('');
	args.context.xajaxDelegateCall = function(data) {
		eval(code);
	}
	args.context.xajaxDelegateCall(args.data);
	return true;
}


/*
	Class: xajax.domResponse
*/
xajax.domResponse = {}

xajax.domResponse.startResponse = function(args) {
	xjxElm = [];
}

xajax.domResponse.createElement = function(args) {
	eval(
		[ args.tgt, ' = document.createElement(args.data)' ]
		.join('')
		);
}

xajax.domResponse.setAttribute = function(args) {
	args.context.xajaxDelegateCall = function() {
		eval(
			[ args.tgt, '.setAttribute(args.key, args.data)' ]
			.join('')
			);
	}
	args.context.xajaxDelegateCall();
}

xajax.domResponse.appendChild = function(args) {
	args.context.xajaxDelegateCall = function() {
		eval(
			[ args.par, '.appendChild(', args.data, ')' ]
			.join('')
			);
	}
	args.context.xajaxDelegateCall();
}

xajax.domResponse.insertBefore = function(args) {
	args.context.xajaxDelegateCall = function() {
		eval(
			[ args.tgt, '.parentNode.insertBefore(', args.data, ', ', args.tgt, ')' ]
			.join('')
			);
	}
	args.context.xajaxDelegateCall();
}

xajax.domResponse.insertAfter = function(args) {
	args.context.xajaxDelegateCall = function() {
		eval(
			[ args.tgt, 'parentNode.insertBefore(', args.data, ', ', args.tgt, '.nextSibling)' ]
			.join('')
			);
	}
	args.context.xajaxDelegateCall();
}

xajax.domResponse.appendText = function(args) {
	args.context.xajaxDelegateCall = function() {
		eval(
			[ args.par, '.appendChild(document.createTextNode(args.data))' ]
			.join('')
			);
	}
	args.context.xajaxDelegateCall();
}

xajax.domResponse.removeChildren = function(args) {
	var skip = args.skip || 0;
	var remove = args.remove || -1;
	var element = null;
	args.context.xajaxDelegateCall = function() {
		eval( [ 'element = ', args.data ].join( '' ) );
	}
	args.context.xajaxDelegateCall();
	var children = element.childNodes;
	for (var i in children) {
		if (isNaN(i) == false && children[i].nodeType == 1) {
			if (skip > 0) skip = skip - 1;
			else if (remove != 0) {
				if (remove > 0)
					remove = remove - 1;
				element.removeChild(children[i]);
			}
		}
	}
}

xajax.domResponse.endResponse = function(args) {
	xjxElm = [];
}


/*
	Class: xajax.css
*/
xajax.css = {}

/*
	Function: xajax.css.add
	
	Add a LINK reference to the specified .css file if it does not
	already exist in the HEAD of the current document.
	
	Parameters:
	
	filename - (string):  The URI of the .css file to reference.

	media - (string):  The media type of the css file (print/screen/handheld,..)
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.css.add = function(fileName, media) {
	var oDoc = xajax.config.baseDocument;
	var oHeads = oDoc.getElementsByTagName('head');
	var oHead = oHeads[0];
	var oLinks = oHead.getElementsByTagName('link');
	
	var found = false;
	var iLen = oLinks.length;
	for (var i = 0; i < iLen && false == found; ++i)
		if (0 <= oLinks[i].href.indexOf(fileName) && oLinks[i].media == media)
			found = true;
	
	if (false == found) {
		var oCSS = oDoc.createElement('link');
		oCSS.rel = 'stylesheet';
		oCSS.type = 'text/css';
		oCSS.href = fileName;
		oCSS.media = media;
		oHead.appendChild(oCSS);
	}
	
	return true;
}

/*
	Function: xajax.css.remove
	
	Locate and remove a LINK reference from the current document's
	HEAD.
	
	Parameters:
	
	filename - (string):  The URI of the .css file.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.css.remove = function(fileName, media) {
	var oDoc = xajax.config.baseDocument;
	var oHeads = oDoc.getElementsByTagName('head');
	var oHead = oHeads[0];
	var oLinks = oHead.getElementsByTagName('link');
	
	var i = 0;
	while (i < oLinks.length)
		if (0 <= oLinks[i].href.indexOf(fileName) && oLinks[i].media == media)
			oHead.removeChild(oLinks[i]);
		else ++i;
	
	return true;
}

/*
	Function: xajax.css.waitForCSS
	
	Attempt to detect when all .css files have been loaded once
	they are referenced by a LINK tag in the HEAD of the current
	document.
	
	Parameters:
	
	args - (object):  The response command object which will contain
		the following:
		
		- args.prop - (integer):  The number of 1/10ths of a second
			to wait before giving up.
	
	Returns:
	
	true - The .css files appear to be loaded.
	false - The .css files do not appear to be loaded and the timeout
		has not expired.
*/
xajax.css.waitForCSS = function(args) {
	var oDocSS = xajax.config.baseDocument.styleSheets;
	var ssEnabled = [];
	var iLen = oDocSS.length;
	for (var i = 0; i < iLen; ++i) {
		ssEnabled[i] = 0;
		try {
			ssEnabled[i] = oDocSS[i].cssRules.length;
		} catch (e) {
			try {
				ssEnabled[i] = oDocSS[i].rules.length;
			} catch (e) {
			}
		}
	}
	
	var ssLoaded = true;
	var iLen = ssEnabled.length;
	for (var i = 0; i < iLen; ++i)
		if (0 == ssEnabled[i])
			ssLoaded = false;
	
	if (false == ssLoaded) {
		// inject a delay in the queue processing
		// handle retry counter
		if (xajax.tools.queue.retry(args, args.prop)) {
			xajax.tools.queue.setWakeup(xajax.response, 10);
			return false;
		}
		// give up, continue processing queue
	}
	return true;
}


/*
	Class: xajax.forms
*/
xajax.forms = {}

/*
	Function: xajax.forms.getInput
	
	Create and return a form input element with the specified parameters.
	
	Parameters:
	
	type - (string):  The type of input element desired.
	name - (string):  The value to be assigned to the name attribute.
	id - (string):  The value to be assigned to the id attribute.
	
	Returns:
	
	object - The new input element.
*/
xajax.forms.getInput = function(type, name, id) {
	if ('undefined' == typeof window.addEventListener) {
		xajax.forms.getInput = function(type, name, id) {
			return xajax.config.baseDocument.createElement('<input type="'+type+'" name="'+name+'" id="'+id+'">');
		}
	} else {
		xajax.forms.getInput = function(type, name, id) {
			var oDoc = xajax.config.baseDocument;
			var Obj = oDoc.createElement('input');
			Obj.setAttribute('type', type);
			Obj.setAttribute('name', name);
			Obj.setAttribute('id', id);
			return Obj;
		}
	}
	return xajax.forms.getInput(type, name, id);
}

/*
	Function: xajax.forms.createInput
	
	Create a new input element under the specified parent.
	
	Parameters:
	
	objParent - (string or object):  The name of, or the element itself
		that will be used as the reference for the insertion.
	sType - (string):  The value to be assigned to the type attribute.
	sName - (string):  The value to be assigned to the name attribute.
	sId - (string):  The value to be assigned to the id attribute.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.forms.createInput = function(command) {
	command.fullName = 'createInput';
	var objParent = command.id;

	var sType = command.type;
	var sName = command.data;
	var sId = command.prop;
	if ('string' == typeof objParent)
		objParent = xajax.$(objParent);
	var target = xajax.forms.getInput(sType, sName, sId);
	if (objParent && target)
	{
		objParent.appendChild(target);
	}
	return true;
}

/*
	Function: xajax.forms.insertInput
	
	Insert a new input element before the specified element.
	
	Parameters:
	
	objSibling - (string or object):  The name of, or the element itself
		that will be used as the reference for the insertion.
	sType - (string):  The value to be assigned to the type attribute.
	sName - (string):  The value to be assigned to the name attribute.
	sId - (string):  The value to be assigned to the id attribute.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.forms.insertInput = function(command) {
	command.fullName = 'insertInput';
	var objSibling = command.id;
	var sType = command.type;
	var sName = command.data;
	var sId = command.prop;
	if ('string' == typeof objSibling)
		objSibling = xajax.$(objSibling);
	var target = xajax.forms.getInput(sType, sName, sId);
	if (target && objSibling && objSibling.parentNode)
		objSibling.parentNode.insertBefore(target, objSibling);
	return true;
}

/*
	Function: xajax.forms.insertInputAfter

	Insert a new input element after the specified element.
	
	Parameters:
	
	objSibling - (string or object):  The name of, or the element itself
		that will be used as the reference for the insertion.
	sType - (string):  The value to be assigned to the type attribute.
	sName - (string):  The value to be assigned to the name attribute.
	sId - (string):  The value to be assigned to the id attribute.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.forms.insertInputAfter = function(command) {
	command.fullName = 'insertInputAfter';
	var objSibling = command.id;
	var sType = command.type;
	var sName = command.data;
	var sId = command.prop;
	if ('string' == typeof objSibling)
		objSibling = xajax.$(objSibling);
	var target = xajax.forms.getInput(sType, sName, sId);
	if (target && objSibling && objSibling.parentNode)
		objSibling.parentNode.insertBefore(target, objSibling.nextSibling);
	return true;
}

/*
	Class: xajax.events
*/
xajax.events = {}

/*
	Function: xajax.events.setEvent
	
	Set an event handler.
	
	Parameters:
	
	command - (object): Response command object.
	- id: Element ID
	- prop: Event
	- data: Code	

	Returns:
	
	true - The operation completed successfully.
*/
xajax.events.setEvent = function(command) {
	command.fullName = 'addEvent';
	var element = command.id;
	var sEvent = command.prop;
	var code = command.data;
	if ('string' == typeof element)
		element = xajax.$(element);
	sEvent = xajax.tools.addOnPrefix(sEvent);
	code = xajax.tools.doubleQuotes(code);
	eval('element.' + sEvent + ' = function() { ' + code + '; }');
	return true;
}

/*
	Function: xajax.events.addHandler
	
	Add an event handler to the specified element.
	
	Parameters:
	
	element - (string or object):  The name of, or the element itself
		which will have the event handler assigned.
	sEvent - (string):  The name of the event.
	fun - (string):  The function to be called.
	
	Returns:
	
	true - The operation completed successfully.
*/
xajax.events.addHandler = function(element, sEvent, fun) {
	if (window.addEventListener) {
		xajax.events.addHandler = function(command) {
			command.fullName = 'addHandler';
			var element = command.id;
			var sEvent = command.prop;
			var fun = command.data;
			if ('string' == typeof element)
				element = xajax.$(element);
			sEvent = xajax.tools.stripOnPrefix(sEvent);
			eval('element.addEventListener("' + sEvent + '", ' + fun + ', false);');
			return true;
		}
	} else {
		xajax.events.addHandler = function(command) {
			command.fullName = 'addHandler';
			var element = command.id;
			var sEvent = command.prop;
			var fun = command.data;
			if ('string' == typeof element)
				element = xajax.$(element);
			sEvent = xajax.tools.addOnPrefix(sEvent);
			eval('element.attachEvent("' + sEvent + '", ' + fun + ', false);');
			return true;
		}
	}
	return xajax.events.addHandler(element, sEvent, fun);
}

/*
	Function: xajax.events.removeHandler
	
	Remove an event handler from an element.
	
	Parameters:
	
	element - (string or object):  The name of, or the element itself which
		will have the event handler removed.
	event - (string):  The name of the event for which thi 411.7402 v
277.1406 412.2803 295.1816 416.2402 295.7002 418.9395 c
296.0601 421.5195 302.6602 424.1602 304.3398 423.2598 c
306.1807 422.4004 306.1807 412.2803 303.1401 411.5 c
300.02 410.5205 279.3418 402.6006 272.4199 401.1797 c
265.2607 399.958 252.5 391.5986 247.2197 390.3799 c
241.9399 388.959 230.1802 388.9395 y
F
0 g
310.3398 429.9795 m
307.0615 428.3408 305.7798 425.4199 v
298.7002 413.8203 282.98 410.2998 v
257.7798 400.3994 249.1401 398.2998 v
234.4614 392.7002 226.3398 393.5 v
218.6216 393.3584 225.3799 391.5801 v
247.6616 393.7998 251.2998 395.6602 v
268.5605 401.499 271.9399 404.2998 v
275.1606 407.2207 295.1816 412.7188 297.6201 414.8594 c
300.02 417.1201 310.8008 426.3584 310.3398 429.9795 c
F
245.7798 395.4199 m
251.5229 395.6865 250.3398 393.9795 v
248.9863 392.2783 246.2598 393.2598 y
245.7798 395.4199 l
F
237.8599 393.9795 m
243.5981 394.2002 242.4199 392.54 v
241.064 390.79 238.3398 391.8193 y
237.8599 393.9795 l
F
226.3398 392.54 m
232.1289 392.8281 230.8999 391.0996 v
229.5918 389.4199 226.8198 390.3799 y
226.3398 392.54 l
F
217.9399 392.0596 m
223.731 392.2275 222.5 390.6201 v
221.1943 388.8193 218.4199 389.8994 y
217.9399 392.0596 l
F
264.02 403.5801 m
271.6133 403.9082 270.02 401.6602 v
268.2368 399.3701 264.7402 400.7002 y
264.02 403.5801 l
F
275.2998 408.3799 m
281.8569 412.0762 281.2998 406.46 v
280.9736 403.6953 276.02 405.5 y
275.2998 408.3799 l
F
285.3799 411.5 m
293.2231 415.6113 291.3799 409.5801 v
290.4609 406.9063 286.1001 408.6201 y
285.3799 411.5 l
F
295.7002 416.7803 m
300.6079 422.2373 301.7002 414.8594 v
302.228 412.1162 296.4199 413.8994 y
295.7002 416.7803 l
F
254.4199 398.54 m
260.2686 398.8945 258.98 397.0996 v
257.7319 395.4844 255.1401 396.3799 y
254.4199 398.54 l
F
1 g
293.7798 532.2197 m
292.8799 531.4473 292.8198 532.7002 v
292.8774 533.8018 312.1113 548.3906 321.8594 549.9795 c
304.1289 542.5107 293.7798 532.2197 v
F
0 R
0 G
1 J 0.11 w 10 M
293.7798 532.2197 m
292.8799 531.4473 292.8198 532.7002 v
292.8774 533.8018 312.1113 548.3906 321.8594 549.9795 c
304.1289 542.5107 293.7798 532.2197 v
293.7798 532.2197 l
s
0 O
0 g
0 J 1 w 4 M
296.8999 461.8994 m
321.1426 437.3594 331.2197 433.3398 v
341.3818 421.0811 336.9805 392.54 v
333.4609 384.1201 330.0195 406.9395 v
333.4609 434.7197 321.1406 417.0195 v
311.9004 428.0098 318.9805 427.5801 v
322.4629 425.4795 322.8203 427.3398 v
323.3408 429.001 314.54 443.96 295.7002 459.7402 c
276.7017 475.6396 296.8999 461.8994 y
F
1 g
232.8198 419.4199 m
232.4814 421.2988 234.5 420.3799 v
236.4414 419.54 340.0615 412.7188 374.9004 386.2998 c
325.1025 411.8408 232.8198 419.4199 v
F
0 R
0 G
1 J 0.11 w 10 M
232.8198 419.4199 m
232.4814 421.2988 234.5 420.3799 v
236.4414 419.54 340.0615 412.7188 374.9004 386.2998 c
325.1025 411.8408 232.8198 419.4199 v
232.8198 419.4199 l
s
0 O
1 g
0 J 1 w 4 M
244.1001 424.2197 m
243.9199 426.1396 246.02 425.1797 v
247.8799 424.3809 398.1416 425.4795 424.0996 389.8994 c
399.9004 417.5596 244.1001 424.2197 v
F
0 R
0 G
1 J 0.11 w 10 M
244.1001 424.2197 m
243.9199 426.1396 246.02 425.1797 v
247.8799 424.3809 398.1416 425.4795 424.0996 389.8994 c
399.9004 417.5596 244.1001 424.2197 v
244.1001 424.2197 l
s
0 O
1 g
0 J 1 w 4 M
256.8198 428.54 m
256.6807 430.5391 258.7402 429.7402 v
260.6406 428.7803 451.3809 443.0791 477.3799 407.4199 c
466.7813 435.6006 256.8198 428.54 v
F
0 R
0 G
1 J 0.11 w 10 M
256.8198 428.54 m
256.6807 430.5391 258.7402 429.7402 v
260.6406 428.7803 451.3809 443.0791 477.3799 407.4199 c
466.7813 435.6006 256.8198 428.54 v
256.8198 428.54 l
s
0 O
1 g
0 J 1 w 4 M
267.8599 433.8193 m
267.6802 435.8193 269.7798 435.0195 v
271.6401 434.0596 406.0615 476.5205 432.0195 440.7803 c
417.2813 467.9404 267.8599 433.8193 v
F
0 R
0 G
1 J 0.11 w 10 M
267.8599 433.8193 m
267.6802 435.8193 269.7798 435.0195 v
271.6401 434.0596 406.0615 476.5205 432.0195 440.7803 c
417.2813 467.9404 267.8599 433.8193 v
267.8599 433.8193 l
s
0 O
1 g
0 J 1 w 4 M
204.02 408.8594 m
203.8809 410.7393 205.9399 409.8193 v
207.8408 408.9795 227.4199 406.5586 229.7002 363.9795 c
221.7007 410.0791 204.02 408.8594 v
F
0 R
0 G
1 J 0.11 w 10 M
204.02 408.8594 m
203.8809 410.7393 205.9399 409.8193 v
207.8408 408.9795 227.4199 406.5586 229.7002 363.9795 c
221.7007 410.0791 204.02 408.8594 v
204.02 408.8594 l
s
0 O
1 g
0 J 1 w 4 M
194.4199 406.9395 m
194.2017 408.9795 196.1001 408.1396 v
198.1616 407.2207 213.7808 412.2803 210.7402 369.5 c
212.0215 408.3193 194.4199 406.9395 v
F
0 R
0 G
1 J 0.11 w 10 M
194.4199 406.9395 m
194.2017 408.9795 196.1001 408.1396 v
198.1616 407.2207 213.7808 412.2803 210.7402 369.5 c
212.0215 408.3193 194.4199 406.9395 v
194.4199 406.9395 l
s
0 O
1 g
0 J 1 w 4 M
185.54 406.46 m
185.4009 408.541 187.46 407.6602 v
189.3608 406.7793 206.2998 406.1191 192.7402 381.5 c
203.2207 407.8809 185.54 406.46 v
F
0 R
0 G
1 J 0.11 w 10 M
185.54 406.46 m
185.4009 408.541 187.46 407.6602 v
189.3608 406.7793 206.2998 406.1191 192.7402 381.5 c
203.2207 407.8809 185.54 406.46 v
185.54 406.46 l
s
0 O
1 g
0 J 1 w 4 M
237.6201 455.4199 m
237.1904 453.1299 238.8198 454.46 v
256.5703 468.3555 292.2559 533.1484 353.54 539.4199 c
311.3691 552.668 237.6201 455.4199 v
F
0 R
0 G
1 J 0.11 w 10 M
237.6201 455.4199 m
237.1904 453.1299 238.8198 454.46 v
256.5703 468.3555 292.2559 533.1484 353.54 539.4199 c
311.3691 552.668 237.6201 455.4199 v
237.6201 455.4199 l
s
0 O
1 g
0 J 1 w 4 M
250.1001 457.3398 m
248.499 458.6211 250.5801 459.2598 v
252.6104 459.9971 376.2949 539.749 419.54 531.0195 c
389.6914 539.2471 250.1001 457.3398 v
F
0 R
0 G
1 J 0.11 w 10 M
250.1001 457.3398 m
248.499 458.6211 250.5801 459.2598 v
252.6104 459.9971 376.2949 539.749 419.54 531.0195 c
389.6914 539.2471 250.1001 457.3398 v
250.1001 457.3398 l
s
0 O
1 g
0 J 1 w 4 M
227.0601 450.6201 m
226.5151 448.8389 228.5 449.8994 v
238.2681 455.5449 242.2446 518.4746 290.1802 519.7402 c
254.5278 536.043 227.0601 450.6201 v
F
0 R
0 G
1 J 0.11 w 10 M
227.0601 450.6201 m
226.5151 448.8389 228.5 449.8994 v
238.2681 455.5449 242.2446 518.4746 290.1802 519.7402 c
254.5278 536.043 227.0601 450.6201 v
227.0601 450.6201 l
s
0 O
1 g
0 J 1 w 4 M
205.2197 438.3799 m
203.9746 437.0547 206.1802 437.4199 v
217.3926 438.7998 240.9365 484.1953 289.9399 478.7002 c
254.6577 494.3906 205.2197 438.3799 v
F
0 R
0 G
1 J 0.11 w 10 M
205.2197 438.3799 m
203.9746 437.0547 206.1802 437.4199 v
217.3926 438.7998 240.9365 484.1953 289.9399 478.7002 c
254.6577 494.3906 205.2197 438.3799 v
205.2197 438.3799 l
s
0 O
1 g
0 J 1 w 4 M
217.46 445.0996 m
216.6294 443.5898 218.6602 444.3799 v
229.4624 447.8818 243.855 496.9521 292.8198 500.7803 c
255.3633 509.5928 217.46 445.0996 v
F
0 R
0 G
1 J 0.11 w 10 M
217.46 445.0996 m
216.6294 443.5898 218.6602 444.3799 v
229.4624 447.8818 243.855 496.9521 292.8198 500.7803 c
255.3633 509.5928 217.46 445.0996 v
217.46 445.0996 l
s
0 O
1 g
0 J 1 w 4 M
197.2998 432.8594 m
196.4551 431.6914 198.2598 431.8994 v
207.3247 433.1045 226.395 469.877 265.9399 465.2598 c
237.5098 478.1338 197.2998 432.8594 v
F
0 R
0 G
1 J 0.11 w 10 M
197.2998 432.8594 m
196.4551 431.6914 198.2598 431.8994 v
207.3247 433.1045 226.395 469.877 265.9399 465.2598 c
237.5098 478.1338 197.2998 432.8594 v
197.2998 432.8594 l
s
0 O
1 g
0 J 1 w 4 M
189.1401 426.3799 m
187.9497 425.1895 189.6201 425.4199 v
194.2856 425.6572 227.9863 462.0459 248.4199 445.0996 c
235.0854 465.5889 189.1401 426.3799 v
F
0 R
0 G
1 J 0.11 w 10 M
189.1401 426.3799 m
187.9497 425.1895 189.6201 425.4199 v
194.2856 425.6572 227.9863 462.0459 248.4199 445.0996 c
235.0854 465.5889 189.1401 426.3799 v
189.1401 426.3799 l
s
0 O
1 g
0 J 1 w 4 M
265.46 461.4199 m
264.2192 462.9434 266.4199 463.3398 v
268.4697 463.791 401.2441 527.2734 443.0605 513.0195 c
414.4668 525.082 265.46 461.4199 v
F
0 R
0 G
1 J 0.11 w 10 M
265.46 461.4199 m
264.2192 462.9434 266.4199 463.3398 v
268.4697 463.791 401.2441 527.2734 443.0605 513.0195 c
414.4668 525.082 265.46 461.4199 v
265.46 461.4199 l
s
0 O
1 g
0 J 1 w 4 M
228.7402 390.6201 m
228.5215 392.7002 230.4199 391.8193 v
232.4814 390.9395 249.4209 390.2793 235.7002 365.6602 c
246.3418 392.041 228.7402 390.6201 v
F
0 R
0 G
1 J 0.11 w 10 M
228.7402 390.6201 m
228.5215 392.7002 230.4199 391.8193 v
232.4814 390.9395 249.4209 390.2793 235.7002 365.6602 c
246.3418 392.041 228.7402 390.6201 v
228.7402 390.6201 l
s
0 O
1 g
0 J 1 w 4 M
240.2598 392.54 m
239.96 394.46 241.9399 393.5 v
243.9199 392.7002 263.5015 390.2793 265.7002 347.6602 c
257.7798 393.7998 240.2598 392.54 v
F
0 R
0 G
1 J 0.11 w 10 M
240.2598 392.54 m
239.96 394.46 241.9399 393.5 v
243.9199 392.7002 263.5015 390.2793 265.7002 347.6602 c
257.7798 393.7998 240.2598 392.54 v
240.2598 392.54 l
s
0 O
1 g
0 J 1 w 4 M
247.7002 394.2197 m
247.4409 396.2188 249.3799 395.4199 v
251.4009 394.46 278.4609 390.7207 304.3398 355.0996 c
265.2607 395.5586 247.7002 394.2197 v
F
0 R
0 G
1 J 0.11 w 10 M
247.7002 394.2197 m
247.4409 396.2188 249.3799 395.4199 v
251.4009 394.46 278.4609 390.7207 304.3398 355.0996 c
265.2607 395.5586 247.7002 394.2197 v
247.7002 394.2197 l
s
0 O
1 g
0 J 1 w 4 M
256.1001 396.3799 m
255.5674 398.4053 257.54 397.8193 v
259.7266 397.1865 282.2021 399.2764 324.0195 361.5801 c
273.3174 400.1191 256.1001 396.3799 v
F
0 R
0 G
1 J 0.11 w 10 M
256.1001 396.3799 m
255.5674 398.4053 257.54 397.8193 v
259.7266 397.1865 282.2021 399.2764 324.0195 361.5801 c
273.3174 400.1191 256.1001 396.3799 v
256.1001 396.3799 l
s
0 O
1 g
0 J 1 w 4 M
267.3799 401.4199 m
267.0078 403.2461 269.0601 402.6201 v
271.165 402.0273 309.4834 397.0762 366.2598 358.7002 c
284.7559 404.96 267.3799 401.4199 v
F
0 R
0 G
1 J 0.11 w 10 M
267.3799 401.4199 m
267.0078 403.2461 269.0601 402.6201 v
271.165 402.0273 309.4834 397.0762 366.2598 358.7002 c
284.7559 404.96 267.3799 401.4199 v
267.3799 401.4199 l
s
0 O
1 g
0 J 1 w 4 M
222.98 414.1396 m
222.7998 416.0186 224.8999 415.0996 v
226.7598 414.2598 285.5 411.3994 318.9805 381.9795 c
280.5488 409.1719 222.98 414.1396 v
F
0 R
0 G
1 J 0.11 w 10 M
222.98 414.1396 m
222.7998 416.0186 224.8999 415.0996 v
226.7598 414.2598 285.5 411.3994 318.9805 381.9795 c
280.5488 409.1719 222.98 414.1396 v
222.98 414.1396 l
s
0 O
1 g
0 J 1 w 4 M
211.9399 409.5801 m
211.8008 411.6201 213.8599 410.7803 v
215.7607 409.8584 242.8208 406.1191 268.8198 370.46 c
229.6206 410.96 211.9399 409.5801 v
F
0 R
0 G
1 J 0.11 w 10 M
211.9399 409.5801 m
211.8008 411.6201 213.8599 410.7803 v
215.7607 409.8584 242.8208 406.1191 268.8198 370.46 c
229.6206 410.96 211.9399 409.5801 v
211.9399 409.5801 l
s
0 O
1 g
0 J 1 w 4 M
279.3799 406.46 m
278.833 408.2764 281.0601 407.8994 v
283.0688 407.3672 321.6465 405.2354 381.1406 370.9395 c
295.748 408.8672 279.3799 406.46 v
F
0 R
0 G
1 J 0.11 w 10 M
279.3799 406.46 m
278.833 408.2764 281.0601 407.8994 v
283.0688 407.3672 321.6465 405.2354 381.1406 370.9395 c
295.748 408.8672 279.3799 406.46 v
279.3799 406.46 l
s
0 O
1 g
0 J 1 w 4 M
288.7402 409.0996 m
288.0728 410.917 290.1802 410.54 v
292.3086 410.0068 330.8867 407.876 390.5 373.5801 c
305.6479 411.9463 288.7402 409.0996 v
F
0 R
0 G
1 J 0.11 w 10 M
288.7402 409.0996 m
288.0728 410.917 290.1802 410.54 v
292.3086 410.0068 330.8867 407.876 390.5 373.5801 c
305.6479 411.9463 288.7402 409.0996 v
288.7402 409.0996 l
s
0 O
1 g
0 J 1 w 4 M
299.2998 414.6201 m
298.6328 416.415 300.7402 416.0596 v
302.8687 415.5049 350.2471 410.7363 449.0605 373.0996 c
316.208 417.4473 299.2998 414.6201 v
F
0 R
0 G
1 J 0.11 w 10 M
299.2998 414.6201 m
298.6328 416.415 300.7402 416.0596 v
302.8687 415.5049 350.2471 410.7363 449.0605 373.0996 c
316.208 417.4473 299.2998 414.6201 v
299.2998 414.6201 l
s
0 O
0 g
0 J 1 w 4 M
176.8999 406.9395 m
182.54 407.4395 181.2197 405.7402 v
179.8999 403.9209 177.3799 404.7803 y
176.8999 406.9395 l
F
210.7402 391.5801 m
216.4209 392.041 215.0601 390.3799 v
213.7808 388.5195 211.2197 389.4199 y
210.7402 391.5801 l
F
201.1401 392.0596 m
206.7417 392.4795 205.46 390.6201 v
204.1016 388.959 201.3799 389.8994 y
201.1401 392.0596 l
F
96.02 405.0195 m
101.665 403.585 99.8599 402.3799 v
98.0166 401.1221 95.7798 402.8594 y
96.02 405.0195 l
F
98.4199 415.5801 m
103.8633 414.1445 102.02 412.9395 v
100.2178 411.6826 97.9399 413.4199 y
98.4199 415.5801 l
F
90.5 420.3799 m
95.9434 418.9854 94.1001 417.7402 v
92.2974 416.5225 90.02 418.2197 y
90.5 420.3799 l
F
0.8 g
178.1001 337.8193 m
176.3818 337.9209 172.1001 335.6602 v
169.7817 335.7197 157.46 331.7598 151.2197 320.7803 c
164.9409 331.3203 178.1001 337.8193 v
F
274.5801 236.0596 m
274.7842 235.7266 274.8438 235.2627 275.0601 235.3398 c
275.8877 235.2002 277.2441 234.8691 277.2197 235.5801 c
276.1733 240.3057 275.2134 245.7363 270.7402 247.8193 c
269.9648 248.0313 268.3784 247.5771 268.3398 246.6201 c
268.1553 244.9277 268.0278 243.4443 268.3398 241.8193 c
268.6978 240.2695 271.0713 240.2578 272.1802 241.8193 c
273.1113 239.9404 273.5864 237.9121 274.5801 236.0596 c
F
262.3398 230.7803 m
263.2666 229.2461 263.125 227.2012 264.7402 226.7002 c
265.4961 226.2607 267.5313 227.333 267.1401 228.6201 c
266.1895 230.7803 265.7622 233.2441 264.2598 235.3398 c
264.0151 235.5244 264.2769 236.1104 264.02 236.54 c
263.4487 237.8115 262.189 238.623 260.6602 238.2197 c
259.4146 235.8369 260.6768 233.4941 262.3398 231.5 c
262.501 231.4473 262.3184 231.0342 262.3398 230.7803 c
F
218.8999 236.54 m
218.7607 236.9258 218.7197 237.4346 218.8999 237.7393 c
219.4854 238.9229 220.3569 240.1592 220.1001 241.3398 c
219.603 242.4434 218.377 242.2441 217.7002 241.5801 c
216.4136 240.5234 216.3584 238.5146 215.54 237.0195 c
215.3838 236.5947 215.4395 235.9658 215.0601 235.5801 c
214.4336 235.0732 213.9487 233.3955 214.1001 232.7002 c
214.1118 232.4238 213.9102 221.5254 214.1001 221.8994 c
214.8369 222.6201 218.1919 233.3291 218.1802 234.3799 c
218.3311 235.1143 219.1353 235.625 218.8999 236.54 c
F
190.5801 243.9795 m
193.5752 246.7305 196.6445 249.9893 196.1001 254.0596 c
196.0303 255.1445 194.0767 254.5664 193.9399 253.5801 c
192.9897 249.6465 190.748 246.7207 187.9399 243.9795 c
185.5063 241.8369 183.459 234.8594 183.1401 234.3799 c
187.2681 240.082 189.7495 243.1016 190.5801 243.9795 c
F
175.7002 250.46 m
176.3218 250.9492 175.9902 251.4893 176.1802 251.8994 c
177.2769 253.457 178.707 254.8281 178.8198 256.7002 c
178.731 257.0449 178.3159 257.3857 177.8599 257.1797 c
177.6416 256.9375 177.2646 256.793 177.1401 256.7002 c
174.915 253.957 173.3745 251.0186 171.8599 247.8193 c
171.5864 247.5322 170.3262 242.5928 170.6602 242.54 c
170.9336 242.377 172.8271 246.9746 173.0601 247.0996 c
174.4473 247.8555 174.459 249.6318 175.7002 250.46 c
F
194.1802 229.0996 m
194.6406 230 196.3735 231.3223 196.3398 232.2197 c
196.1216 233.3213 196.6353 234.9082 195.6201 234.1396 c
194.2495 233.1074 190.4551 231.625 190.1001 225.2598 c
190.1313 224.6064 193.4023 227.5713 194.1802 229.0996 c
F
210.02 247.8193 m
210.481 248.6738 211.2583 248.1533 211.7002 248.54 c
212.4775 248.8516 213.1494 249.4658 213.3799 250.2197 c
214.5366 252.543 216.4834 254.5469 216.7402 257.1797 c
215 258.7256 214.2534 256.4814 213.6201 255.5 c
212.1055 257.2305 211.0063 255.1709 209.54 254.54 c
209.499 254.5684 209.2642 254.9502 209.2998 255.0195 c
207.8862 254.4365 207.1401 253.2461 205.9399 252.3799 c
205.8535 252.2402 205.4097 252.4395 205.2197 252.3799 c
204.5288 251.626 203.4585 251.2686 203.0601 250.46 c
201.9297 247.541 198.4761 245.2354 196.3398 237.0195 c
196.8198 235.9395 201.3633 244.2461 201.8599 244.9395 c
202.8198 246.3291 202.9497 243.1875 204.2598 243.9795 c
204.4087 243.9482 204.6128 243.6865 204.7402 243.5 c
204.9727 243.8477 205.2129 244.0996 205.7002 243.9795 c
205.6401 244.4189 205.4937 245.0313 205.7002 245.1797 c
207.0752 246.2813 206.9814 247.4551 207.8599 248.7803 c
208.3447 247.9521 209.5112 248.7412 210.02 247.8193 c
F
275.7798 188.0596 m
283.9614 210.54 279.1401 222.8594 v
291.6606 199.0996 286.5801 186.8594 v
286.1602 198.2188 281.7798 203.6602 v
277.3613 189.6387 275.7798 188.0596 v
F
259.46 190.9395 m
265.4814 200.6406 256.5801 220.9395 v
255.7998 198.4395 248.4199 186.3799 v
263.9409 208.5605 259.46 190.9395 v
F
248.6602 193.0996 m
248.3218 215.1602 248.6602 218.54 v
244.5801 200.1992 233.2998 189.7393 v
249.2002 202.8389 248.6602 193.0996 v
F
238.1001 228.3799 m
244.5801 213.3994 233.54 193.0996 v
240.6201 206.5781 235.46 214.2197 v
238.2007 218.0186 238.1001 228.3799 v
F
216.98 193.5801 m
215.7607 210.7588 217.7002 213.2598 v
217.9614 220.2197 217.46 221.4199 v
221.9214 228.1396 222.2598 219.9795 v
223.6807 211.4189 226.8198 206.2998 v
230.7197 200.4199 230.4199 193.3398 v
219.5 226.5986 216.98 193.5801 v
F
212.8999 224.0596 m
205.6401 212.0791 203.7798 191.1797 v
202.1216 198.001 206.4199 213.7393 v
210.9199 230.7803 212.8999 224.0596 v
F
188.8999 202.2197 m
194.4199 208.1191 195.8599 213.5 v
199.9209 231.001 192.98 221.4199 v
193.1001 212.7393 184.1001 204.6201 v
189.3608 207.2402 188.8999 202.2197 v
F
182.6602 207.7393 m
186.2817 226.8193 187.2197 227.6602 v
189.1401 231.4395 186.02 227.8994 v
176.3818 206.7988 172.1001 199.5801 v
180.7808 209.6602 182.6602 207.7393 v
F
176.1802 225.9795 m
188.9214 250.5801 164.8999 222.1396 v
177.0415 232.9785 176.1802 225.9795 v
F
159.1401 242.0596 m
164.5015 262.6777 167.2998 262.46 v
176.3818 272.3594 169.2197 260.7803 v
162.5215 250.1406 163.2197 239.4199 v
162.5215 249.9199 159.1401 242.0596 v
F
522.5 254.54 m
509.3496 265.541 506.6602 269.4199 v
521.4512 249.041 521.54 241.3398 v
524.2012 249.5908 522.5 254.54 v
F
528.5 278.7803 m
505.501 295.2412 501.6201 303.5 v
530.8018 271.04 530.9004 266.0596 v
531.3516 275.9912 528.5 278.7803 v
F
547.2197 448.2197 m
534.1016 456.9414 532.3398 454.7002 v
544.002 447.5908 546.7402 438.1396 v
545.1006 448.1406 547.2197 448.2197 v
F
556.5801 359.6602 m
537.3799 372.8594 l
558.3008 354.0918 558.7402 349.5801 v
556.5801 359.6602 l
F
*u
0 R
0 G
1 J 1.1 w 10 M
126.7402 384.3799 m
150.98 379.0996 l
S
1 D
182.1802 206.0596 m
181.5513 209.9912 171.6201 198.3799 v
S
188.1802 200.54 m
190.3496 207.79 183.1401 202.9395 v
S
247.46 191.1797 m
249.2002 203.3906 236.6602 189.0195 v
S
*U
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
